[
  {
    "id": "26872a71-67ae-4557-8d54-9a9174de3653",
    "title": "optimal-transformers.pdf",
    "pdf_url": "/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/pdf/original.pdf",
    "extraction": {
      "pages": [
        {
          "figures": [
            {
              "ref": null,
              "url": "/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/30c0cd98-9c47-48c8-9a5d-61b1db8167ff.png"
            }
          ],
          "page_number": 1,
          "text": "Training Compute-Optimal Large Language Models\n<br><br>Jordan Ho\ufb00mann\u2605, Sebastian Borgeaud\u2605, Arthur Mensch\u2605, Elena Buchatskaya, Trevor Cai, Eliza Rutherford,\nDiego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, Tom Hennigan, Eric Noland,\nKatie Millican, George van den Driessche, Bogdan Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan,\nErich Elsen, Jack W. Rae, Oriol Vinyals and Laurent Sifre\u2605\n<br><br>\u2605Equal contributions\n<br><br>We investigate the optimal model size and number of tokens for training a transformer language model\nunder a given compute budget. We \ufb01nd that current large language models are signi\ufb01cantly under-\ntrained, a consequence of the recent focus on scaling language models whilst keeping the amount of\ntraining data constant. By training over 400 language models ranging from 70 million to over 16 billion\nparameters on 5 to 500 billion tokens, we \ufb01nd that for compute-optimal training, the model size and\nthe number of training tokens should be scaled equally: for every doubling of model size the number\nof training tokens should also be doubled. We test this hypothesis by training a predicted compute-\noptimal model, Chinchilla, that uses the same compute budget as Gopher but with 70B parameters and\n4\u00d7 more more data. Chinchilla uniformly and signi\ufb01cantly outperforms Gopher (280B), GPT-3 (175B),\nJurassic-1 (178B), and Megatron-Turing NLG (530B) on a large range of downstream evaluation tasks.\nThis also means that Chinchilla uses substantially less compute for \ufb01ne-tuning and inference, greatly\nfacilitating downstream usage. As a highlight, Chinchilla reaches a state-of-the-art average accuracy of\n67.5% on the MMLU benchmark, greater than a 7% improvement over Gopher.\n<br><br>1. Introduction\n<br><br>Recently a series of Large Language Models (LLMs) have been introduced (Brown et al., 2020; Lieber\net al., 2021; Rae et al., 2021; Smith et al., 2022; Thoppilan et al., 2022), with the largest dense\nlanguage models now having over 500 billion parameters. These large autoregressive transformers\n(Vaswani et al., 2017) have demonstrated impressive performance on many tasks using a variety of\nevaluation protocols such as zero-shot, few-shot, and \ufb01ne-tuning.\n<br><br>The compute and energy cost for training large language models is substantial (Rae et al., 2021;\nThoppilan et al., 2022) and rises with increasing model size. In practice, the allocated training\ncompute budget is often known in advance: how many accelerators are available and for how long\nwe want to use them. Since it is typically only feasible to train these large models once, accurately\nestimating the best model hyperparameters for a given compute budget is critical (Tay et al., 2021).\n<br><br>Kaplan et al. (2020) showed that there is a power law relationship between the number of\nparameters in an autoregressive language model (LM) and its performance. As a result, the \ufb01eld has\nbeen training larger and larger models, expecting performance improvements. One notable conclusion\nin Kaplan et al. (2020) is that large models should not be trained to their lowest possible loss to be\ncompute optimal. Whilst we reach the same conclusion, we estimate that large models should be\ntrained for many more training tokens than recommended by the authors. Speci\ufb01cally, given a 10\u00d7\nincrease computational budget, they suggests that the size of the model should increase 5.5\u00d7 while\nthe number of training tokens should only increase 1.8\u00d7. Instead, we \ufb01nd that model size and the\nnumber of training tokens should be scaled in equal proportions.\n<br><br>Following Kaplan et al. (2020) and the training setup of GPT-3 (Brown et al., 2020), many of the\nrecently trained large models have been trained for approximately 300 billion tokens (Table 1), in\nline with the approach of predominantly increasing model size when increasing compute.\n<br><br>Corresponding authors: {jordanho\ufb00mann|sborgeaud|amensch|sifre}@deepmind.com\n\u00a9 2023 DeepMind. All rights reserved\n<br><br>arXiv:2203.15556v1  [cs.CL]  29 Mar 2022\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 2,
          "text": "1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>10M\n<br><br>100M\n<br><br>1.0B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>Parameters\n<br><br>Approach 1\nApproach 2\nApproach 3\nKaplan et al (2020)\n \nChinchilla (70B)\nGopher (280B)\nGPT-3 (175B)\nMegatron-Turing NLG (530B)\n<br><br>Figure 1 | Overlaid predictions. We overlay the predictions from our three di\ufb00erent approaches,\nalong with projections from Kaplan et al. (2020). We \ufb01nd that all three methods predict that current\nlarge models should be substantially smaller and therefore trained much longer than is currently\ndone. In Figure A3, we show the results with the predicted optimal tokens plotted against the optimal\nnumber of parameters for \ufb01xed FLOP budgets. Chinchilla outperforms Gopher and the other large\nmodels (see Section 4.2).\n<br><br>In this work, we revisit the question: Given a \ufb01xed FLOPs budget,1 how should one trade-o\ufb00model\nsize and the number of training tokens? To answer this question, we model the \ufb01nal pre-training loss2\n<br><br>\ud835\udc3f(\ud835\udc41, \ud835\udc37) as a function of the number of model parameters \ud835\udc41, and the number of training tokens, \ud835\udc37.\nSince the computational budget \ud835\udc36is a deterministic function FLOPs(\ud835\udc41, \ud835\udc37) of the number of seen\ntraining tokens and model parameters, we are interested in minimizing \ud835\udc3funder the constraint\nFLOPs(\ud835\udc41, \ud835\udc37) = \ud835\udc36:\n\ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36), \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36) =\nargmin\n\ud835\udc41,\ud835\udc37s.t. FLOPs(\ud835\udc41,\ud835\udc37)=\ud835\udc36\n\ud835\udc3f(\ud835\udc41, \ud835\udc37).\n(1)\n<br><br>The functions \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36), and \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36) describe the optimal allocation of a computational budget \ud835\udc36. We\nempirically estimate these functions based on the losses of over 400 models, ranging from under 70M\nto over 16B parameters, and trained on 5B to over 400B tokens \u2013 with each model con\ufb01guration\ntrained for several di\ufb00erent training horizons. Our approach leads to considerably di\ufb00erent results\nthan that of Kaplan et al. (2020). We highlight our results in Figure 1 and how our approaches di\ufb00er\nin Section 2.\n<br><br>Based on our estimated compute-optimal frontier, we predict that for the compute budget used\nto train Gopher, an optimal model should be 4 times smaller, while being training on 4 times more\ntokens. We verify this by training a more compute-optimal 70B model, called Chinchilla, on 1.4 trillion\ntokens. Not only does Chinchilla outperform its much larger counterpart, Gopher, but its reduced\nmodel size reduces inference cost considerably and greatly facilitates downstream uses on smaller\nhardware. The energy cost of a large language model is amortized through its usage for inference an\n\ufb01ne-tuning. The bene\ufb01ts of a more optimally trained smaller model, therefore, extend beyond the\nimmediate bene\ufb01ts of its improved performance.\n<br><br>1For example, knowing the number of accelerators and a target training duration.\n2For simplicity, we perform our analysis on the smoothed training loss which is an unbiased estimate of the test loss, as\nwe are in the in\ufb01nite data regime (the number of training tokens is less than the number of tokens in the entire corpus).\n<br><br>2\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 3,
          "text": "Table 1 | Current LLMs. We show \ufb01ve of the current largest dense transformer models, their size,\nand the number of training tokens. Other than LaMDA (Thoppilan et al., 2022), most models are\ntrained for approximately 300 billion tokens. We introduce Chinchilla, a substantially smaller model,\ntrained for much longer than 300B tokens.\n<br><br>Model\nSize (# Parameters)\nTraining Tokens\n<br><br>LaMDA (Thoppilan et al., 2022)\n137 Billion\n168 Billion\nGPT-3 (Brown et al., 2020)\n175 Billion\n300 Billion\nJurassic (Lieber et al., 2021)\n178 Billion\n300 Billion\nGopher (Rae et al., 2021)\n280 Billion\n300 Billion\nMT-NLG 530B (Smith et al., 2022)\n530 Billion\n270 Billion\n<br><br>Chinchilla\n70 Billion\n1.4 Trillion\n<br><br>2. Related Work\n<br><br>Large language models.\nA variety of large language models have been introduced in the last few\nyears. These include both dense transformer models (Brown et al., 2020; Lieber et al., 2021; Rae\net al., 2021; Smith et al., 2022; Thoppilan et al., 2022) and mixture-of-expert (MoE) models (Du\net al., 2021; Fedus et al., 2021; Zoph et al., 2022). The largest dense transformers have passed 500\nbillion parameters (Smith et al., 2022). The drive to train larger and larger models is clear\u2014so far\nincreasing the size of language models has been responsible for improving the state-of-the-art in many\nlanguage modelling tasks. Nonetheless, large language models face several challenges, including\ntheir overwhelming computational requirements (the cost of training and inference increase with\nmodel size) (Rae et al., 2021; Thoppilan et al., 2022) and the need for acquiring more high-quality\ntraining data. In fact, in this work we \ufb01nd that larger, high quality datasets will play a key role in any\nfurther scaling of language models.\n<br><br>Modelling the scaling behavior.\nUnderstanding the scaling behaviour of language models and\ntheir transfer properties has been important in the development of recent large models (Hernandez\net al., 2021; Kaplan et al., 2020). Kaplan et al. (2020) \ufb01rst showed a predictable relationship between\nmodel size and loss over many orders of magnitude. The authors investigate the question of choosing\nthe optimal model size to train for a given compute budget. Similar to us, they address this question\nby training various models. Our work di\ufb00ers from Kaplan et al. (2020) in several important ways.\nFirst, the authors use a \ufb01xed number of training tokens and learning rate schedule for all models; this\nprevents them from modelling the impact of these hyperparameters on the loss. In contrast, we \ufb01nd\nthat setting the learning rate schedule to approximately match the number of training tokens results\nin the best \ufb01nal loss regardless of model size\u2014see Figure A1. For a \ufb01xed learning rate cosine schedule\nto 130B tokens, the intermediate loss estimates (for \ud835\udc37\u2032 << 130B) are therefore overestimates of the\nloss of a model trained with a schedule length matching \ud835\udc37\u2032. Using these intermediate losses results in\nunderestimating the e\ufb00ectiveness of training models on less data than 130B tokens, and eventually\ncontributes to the conclusion that model size should increase faster than training data size as compute\nbudget increases. In contrast, our analysis predicts that both quantities should scale at roughly the\nsame rate. Secondly, we include models with up to 16B parameters, as we observe that there is slight\ncurvature in the FLOP-loss frontier (see Appendix E)\u2014in fact, the majority of the models used in\nour analysis have more than 500 million parameters, in contrast the majority of runs in Kaplan et al.\n(2020) are signi\ufb01cantly smaller\u2014many being less than 100M parameters.\n<br><br>Recently, Clark et al. (2022) speci\ufb01cally looked in to the scaling properties of Mixture of Expert\n<br><br>3\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 4,
          "text": "language models, showing that the scaling with number of experts diminishes as the model size\nincreases\u2014their approach models the loss as a function of two variables: the model size and the\nnumber of experts. However, the analysis is done with a \ufb01xed number of training tokens, as in Kaplan\net al. (2020), potentially underestimating the improvements of branching.\n<br><br>Estimating hyperparameters for large models.\nThe model size and the number of training tokens\nare not the only two parameters to chose when selecting a language model and a procedure to train\nit. Other important factors include learning rate, learning rate schedule, batch size, optimiser, and\nwidth-to-depth ratio. In this work, we focus on model size and the number of training steps, and\nwe rely on existing work and provided experimental heuristics to determine the other necessary\nhyperparameters. Yang et al. (2021) investigates how to choose a variety of these parameters for\ntraining an autoregressive transformer, including the learning rate and batch size. McCandlish et al.\n(2018) \ufb01nds only a weak dependence between optimal batch size and model size. Shallue et al.\n(2018); Zhang et al. (2019) suggest that using larger batch-sizes than those we use is possible. Levine\net al. (2020) investigates the optimal depth-to-width ratio for a variety of standard model sizes. We\nuse slightly less deep models than proposed as this translates to better wall-clock performance on our\nhardware.\n<br><br>Improved model architectures.\nRecently, various promising alternatives to traditional dense trans-\nformers have been proposed. For example, through the use of conditional computation large MoE\nmodels like the 1.7 trillion parameter Switch transformer (Fedus et al., 2021), the 1.2 Trillion pa-\nrameter GLaM model (Du et al., 2021), and others (Artetxe et al., 2021; Zoph et al., 2022) are able\nto provide a large e\ufb00ective model size despite using relatively fewer training and inference FLOPs.\nHowever, for very large models the computational bene\ufb01ts of routed models seems to diminish (Clark\net al., 2022). An orthogonal approach to improving language models is to augment transformers\nwith explicit retrieval mechanisms, as done by Borgeaud et al. (2021); Guu et al. (2020); Lewis et al.\n(2020). This approach e\ufb00ectively increases the number of data tokens seen during training (by a\nfactor of \u223c10 in Borgeaud et al. (2021)). This suggests that the performance of language models\nmay be more dependant on the size of the training data than previously thought.\n<br><br>3. Estimating the optimal parameter/training tokens allocation\n<br><br>We present three di\ufb00erent approaches to answer the question driving our research: Given a \ufb01xed\nFLOPs budget, how should one trade-o\ufb00model size and the number of training tokens? In all three\ncases we start by training a range of models varying both model size and the number of training\ntokens and use the resulting training curves to \ufb01t an empirical estimator of how they should scale.\nWe assume a power-law relationship between compute and model size as done in Clark et al. (2022);\n<br><br>Kaplan et al. (2020), though future work may want to include potential curvature in this relationship\nfor large model sizes. The resulting predictions are similar for all three methods and suggest that\nparameter count and number of training tokens should be increased equally with more compute3\u2014\nwith proportions reported in Table 2. This is in clear contrast to previous work on this topic and\nwarrants further investigation.\n<br><br>3We compute FLOPs as described in Appendix F.\n<br><br>4\n<br><br>"
        },
        {
          "figures": [
            {
              "ref": "Figure 2",
              "url": "/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/916d4c76-b3c4-49d8-88a2-dfab5f792fd6.png"
            }
          ],
          "page_number": 5,
          "text": "1017\n1018\n1019\n1020\n1021\n1022\nFLOPS\n<br><br>2.0\n<br><br>2.5\n<br><br>3.0\n<br><br>3.5\n<br><br>4.0\n<br><br>4.5\n<br><br>5.0\n5.5\n6.0\n<br><br>Training loss\n<br><br>75M\n<br><br>250M\n<br><br>500M\n<br><br>1B\n<br><br>2.5B\n<br><br>5B\n<br><br>10B\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>109\n<br><br>1010\n<br><br>1011\n<br><br>1012\n<br><br>Tokens\n<br><br>1.5T\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1.0B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>Parameters\n<br><br>67B\n<br><br><a href='#' class='figure-link' data-figure-url='/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/916d4c76-b3c4-49d8-88a2-dfab5f792fd6.png'>Figure 2</a> | Training curve envelope. On the left we show all of our di\ufb00erent runs. We launched a\nrange of model sizes going from 70M to 10B, each for four di\ufb00erent cosine cycle lengths. From these\ncurves, we extracted the envelope of minimal loss per FLOP, and we used these points to estimate the\noptimal model size (center) for a given compute budget and the optimal number of training tokens\n(right). In green, we show projections of optimal model size and training token count based on the\nnumber of FLOPs used to train Gopher (5.76 \u00d7 1023).\n<br><br>3.1. Approach 1: Fix model sizes and vary number of training tokens\n<br><br>In our \ufb01rst approach we vary the number of training steps for a \ufb01xed family of models (ranging from\n70M to over 10B parameters), training each model for 4 di\ufb00erent number of training sequences.\nFrom these runs, we are able to directly extract an estimate of the minimum loss achieved for a given\nnumber of training FLOPs. Training details for this approach can be found in Appendix D.\n<br><br>For each parameter count \ud835\udc41we train 4 di\ufb00erent models, decaying the learning rate by a factor of\n10\u00d7 over a horizon (measured in number of training tokens) that ranges by a factor of 16\u00d7. Then, for\neach run, we smooth and then interpolate the training loss curve. From this, we obtain a continuous\nmapping from FLOP count to training loss for each run. Then, for each FLOP count, we determine\nwhich run achieves the lowest loss. Using these interpolants, we obtain a mapping from any FLOP\ncount \ud835\udc36, to the most e\ufb03cient choice of model size \ud835\udc41and number of training tokens \ud835\udc37such that\nFLOPs(\ud835\udc41, \ud835\udc37) = \ud835\udc36.4 At 1500 logarithmically spaced FLOP values, we \ufb01nd which model size achieves the\nlowest loss of all models along with the required number of training tokens. Finally, we \ufb01t power laws\nto estimate the optimal model size and number of training tokens for any given amount of compute\n(see the center and right panels of <a href='#' class='figure-link' data-figure-url='/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/916d4c76-b3c4-49d8-88a2-dfab5f792fd6.png'>Figure 2</a>), obtaining a relationship \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4eand \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4f. We\n\ufb01nd that \ud835\udc4e= 0.50 and \ud835\udc4f= 0.50\u2014as summarized in Table 2. In Section D.4, we show a head-to-head\ncomparison at 1021 FLOPs, using the model size recommended by our analysis and by the analysis of\nKaplan et al. (2020)\u2014using the model size we predict has a clear advantage.\n<br><br>3.2. Approach 2: IsoFLOP pro\ufb01les\n<br><br>In our second approach we vary the model size5 for a \ufb01xed set of 9 di\ufb00erent training FLOP counts6\n<br><br>(ranging from 6 \u00d7 1018 to 3 \u00d7 1021 FLOPs), and consider the \ufb01nal training loss for each point7. in\ncontrast with Approach 1 that considered points (\ud835\udc41, \ud835\udc37, \ud835\udc3f) along the entire training runs. This allows\nus to directly answer the question: For a given FLOP budget, what is the optimal parameter count?\n<br><br>4Note that all selected points are within the last 15% of training. This suggests that when training a model over \ud835\udc37tokens,\nwe should pick a cosine cycle length that decays 10\u00d7 over approximately \ud835\udc37tokens\u2014see further details in Appendix B.\n5In approach 2, model size varies up to 16B as opposed to approach 1 where we only used models up to 10B.\n6The number of training tokens is determined by the model size and training FLOPs.\n7We set the cosine schedule length to match the number of tokens, which is optimal according to the analysis presented\nin Appendix B.\n<br><br>5\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 6,
          "text": "100M 300M\n1B\n3B\n6B\n30B\nParameters\n<br><br>2.0\n<br><br>2.2\n<br><br>2.4\n<br><br>2.6\n<br><br>2.8\n<br><br>3.0\n<br><br>3.2\n<br><br>Training Loss\n<br><br>6e18\n1e19\n3e19\n6e19\n1e20\n3e20\n6e20\n1e21\n3e21\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>Parameters\n<br><br>63B\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>10T\n<br><br>Tokens\n<br><br>1.4T\n<br><br>Figure 3 | IsoFLOP curves. For various model sizes, we choose the number of training tokens such\nthat the \ufb01nal FLOPs is a constant. The cosine cycle length is set to match the target FLOP count. We\n\ufb01nd a clear valley in loss, meaning that for a given FLOP budget there is an optimal model to train\n(left). Using the location of these valleys, we project optimal model size and number of tokens for\nlarger models (center and right). In green, we show the estimated number of parameters and tokens\nfor an optimal model trained with the compute budget of Gopher.\n<br><br>For each FLOP budget, we plot the \ufb01nal loss (after smoothing) against the parameter count in\nFigure 3 (left). In all cases, we ensure that we have trained a diverse enough set of model sizes to see\na clear minimum in the loss. We \ufb01t a parabola to each IsoFLOPs curve to directly estimate at what\nmodel size the minimum loss is achieved (Figure 3 (left)). As with the previous approach, we then \ufb01t\na power law between FLOPs and loss-optimal model size and number of training tokens, shown in\nFigure 3 (center, right). Again, we \ufb01t exponents of the form \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4eand \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4fand we \ufb01nd that\n\ud835\udc4e= 0.49 and \ud835\udc4f= 0.51\u2014as summarized in Table 2.\n<br><br>3.3. Approach 3: Fitting a parametric loss function\n<br><br>Lastly, we model all \ufb01nal losses from experiments in Approach 1 & 2 as a parametric function of\nmodel parameter count and the number of seen tokens. Following a classical risk decomposition (see\nSection D.2), we propose the following functional form\n<br><br>^\ud835\udc3f(\ud835\udc41, \ud835\udc37) \u225c\ud835\udc38+ \ud835\udc34\n<br><br>\ud835\udc41\ud835\udefc+ \ud835\udc35\n<br><br>\ud835\udc37\ud835\udefd.\n(2)\n<br><br>The \ufb01rst term captures the loss for an ideal generative process on the data distribution, and should\ncorrespond to the entropy of natural text. The second term captures the fact that a perfectly trained\ntransformer with \ud835\udc41parameters underperforms the ideal generative process. The \ufb01nal term captures\nthe fact that the transformer is not trained to convergence, as we only make a \ufb01nite number of\noptimisation steps, on a sample of the dataset distribution.\n<br><br>Model \ufb01tting.\nTo estimate (\ud835\udc34, \ud835\udc35, \ud835\udc38, \ud835\udefc, \ud835\udefd), we minimize the Huber loss (Huber, 1964) between the\npredicted and observed log loss using the L-BFGS algorithm (Nocedal, 1980):\n<br><br>min\n\ud835\udc34,\ud835\udc35,\ud835\udc38,\ud835\udefc,\ud835\udefd\n<br><br>\u2211\ufe01\n<br><br>Runs \ud835\udc56\nHuber\ud835\udeff\n\u0010\nlog ^\ud835\udc3f(\ud835\udc41\ud835\udc56, \ud835\udc37\ud835\udc56) \u2212log \ud835\udc3f\ud835\udc56\n\u0011\n(3)\n<br><br>We account for possible local minima by selecting the best \ufb01t from a grid of initialisations. The Huber\nloss (\ud835\udeff= 10\u22123) is robust to outliers, which we \ufb01nd important for good predictive performance over\nheld-out data points. Section D.2 details the \ufb01tting procedure and the loss decomposition.\n<br><br>6\n<br><br>"
        },
        {
          "figures": [
            {
              "ref": "Figure 4",
              "url": "/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/79f5e3df-8d51-49ff-8a8b-f2cef9c8102b.png"
            }
          ],
          "page_number": 7,
          "text": "1018\n1019\n1020\n1021\n1022\n1023 Gopher\n<br><br>budget\nTraining FLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>40B\n<br><br>100B\n<br><br>Model size\n<br><br>IsoLoss contours\n<br><br>Efficient frontier\nEmpirical data\nIsoFLOPs slice\n<br><br>2.00\n<br><br>3.00\n<br><br>4.00\n<br><br>5.00\n<br><br>Loss\n<br><br>100M\n1B\n10B\n40B\n<br><br>Model size\n<br><br>IsoFLOPs slices\n<br><br>Train. FLOPs\n<br><br>6e+18\n1e+19\n3e+19\n6e+19\n1e+20\n3e+20\n6e+20\n1e+21\n3e+21\nGopher\n<br><br><a href='#' class='figure-link' data-figure-url='/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/79f5e3df-8d51-49ff-8a8b-f2cef9c8102b.png'>Figure 4</a> | Parametric \ufb01t. We \ufb01t a parametric modelling of the loss ^\ud835\udc3f(\ud835\udc41, \ud835\udc37) and display contour (left)\nand isoFLOP slices (right). For each isoFLOP slice, we include a corresponding dashed line in the left\nplot. In the left plot, we show the e\ufb03cient frontier in blue, which is a line in log-log space. Speci\ufb01cally,\nthe curve goes through each iso-loss contour at the point with the fewest FLOPs. We project the\noptimal model size given the Gopher FLOP budget to be 40B parameters.\n<br><br>E\ufb03cient frontier.\nWe can approximate the functions \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61and \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61by minimizing the parametric\nloss ^\ud835\udc3funder the constraint FLOPs(\ud835\udc41, \ud835\udc37) \u22486\ud835\udc41\ud835\udc37(Kaplan et al., 2020). The resulting \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61and \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\nbalance the two terms in Equation (3) that depend on model size and data. By construction, they\nhave a power-law form:\n<br><br>\ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36) = \ud835\udc3a\n\u0012\ud835\udc36\n<br><br>6\n<br><br>\u0013\ud835\udc4e\n,\n\ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61(\ud835\udc36) = \ud835\udc3a\u22121\n\u0012\ud835\udc36\n<br><br>6\n<br><br>\u0013\ud835\udc4f\n,\nwhere\n\ud835\udc3a=\n\u0012\ud835\udefc\ud835\udc34\n<br><br>\ud835\udefd\ud835\udc35\n<br><br>\u0013\n1\n\ud835\udefc+\ud835\udefd\n,\n\ud835\udc4e=\n\ud835\udefd\n\ud835\udefc+ \ud835\udefd, and \ud835\udc4f=\n\ud835\udefc\n\ud835\udefc+ \ud835\udefd.\n(4)\n<br><br>We show contours of the \ufb01tted function ^\ud835\udc3fin <a href='#' class='figure-link' data-figure-url='/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/79f5e3df-8d51-49ff-8a8b-f2cef9c8102b.png'>Figure 4</a> (left), and the closed-form e\ufb03cient computational\nfrontier in blue. From this approach, we \ufb01nd that \ud835\udc4e= 0.46 and \ud835\udc4f= 0.54\u2014as summarized in Table 2.\n<br><br>3.4. Optimal model scaling\n<br><br>We \ufb01nd that the three approaches, despite using di\ufb00erent \ufb01tting methodologies and di\ufb00erent trained\nmodels, yield comparable predictions for the optimal scaling in parameters and tokens with FLOPs\n(shown in Table 2). All three approaches suggest that as compute budget increases, model size and\nthe amount of training data should be increased in approximately equal proportions. The \ufb01rst and\nsecond approaches yield very similar predictions for optimal model sizes, as shown in Figure 1 and\nFigure A3. The third approach predicts even smaller models being optimal at larger compute budgets.\nWe note that the observed points (\ud835\udc3f, \ud835\udc41, \ud835\udc37) for low training FLOPs (\ud835\udc36\u2a7d1\ud835\udc5221) have larger residuals\n\u2225\ud835\udc3f\u2212^\ud835\udc3f(\ud835\udc41, \ud835\udc37)\u2225\n2\n2 than points with higher computational budgets. The \ufb01tted model places increased\nweight on the points with more FLOPs\u2014automatically considering the low-computational budget\npoints as outliers due to the Huber loss. As a consequence of the empirically observed negative\ncurvature in the frontier \ud835\udc36\u2192\ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61(see Appendix E), this results in predicting a lower \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61than the\ntwo other approaches.\n<br><br>In Table 3 we show the estimated number of FLOPs and tokens that would ensure that a model of\na given size lies on the compute-optimal frontier. Our \ufb01ndings suggests that the current generation of\n<br><br>7\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 8,
          "text": "Table 2 | Estimated parameter and data scaling with increased training compute. The listed\nvalues are the exponents, \ud835\udc4eand \ud835\udc4f, on the relationship \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4eand \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4f. Our analysis suggests\na near equal scaling in parameters and data with increasing compute which is in clear contrast\nto previous work on the scaling of large models. The 10th and 90th percentiles are estimated via\nbootstrapping data (80% of the dataset is sampled 100 times) and are shown in parenthesis.\n<br><br>Approach\nCoe\ufb00. \ud835\udc4ewhere \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4e\nCoe\ufb00. \ud835\udc4fwhere \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4f\n<br><br>1. Minimum over training curves\n0.50 (0.488, 0.502)\n0.50 (0.501, 0.512)\n2. IsoFLOP pro\ufb01les\n0.49 (0.462, 0.534)\n0.51 (0.483, 0.529)\n3. Parametric modelling of the loss\n0.46 (0.454, 0.455)\n0.54 (0.542, 0.543)\n<br><br>Kaplan et al. (2020)\n0.73\n0.27\n<br><br>Table 3 | Estimated optimal training FLOPs and training tokens for various model sizes. For\nvarious model sizes, we show the projections from Approach 1 of how many FLOPs and training\ntokens would be needed to train compute-optimal models. The estimates for Approach 2 & 3 are\nsimilar (shown in Section D.3)\n<br><br>.\n<br><br>Parameters\nFLOPs\nFLOPs (in Gopher unit)\nTokens\n<br><br>400 Million\n1.92e+19\n1/29, 968\n8.0 Billion\n1 Billion\n1.21e+20\n1/4, 761\n20.2 Billion\n10 Billion\n1.23e+22\n1/46\n205.1 Billion\n67 Billion\n5.76e+23\n1\n1.5 Trillion\n175 Billion\n3.85e+24\n6.7\n3.7 Trillion\n280 Billion\n9.90e+24\n17.2\n5.9 Trillion\n520 Billion\n3.43e+25\n59.5\n11.0 Trillion\n1 Trillion\n1.27e+26\n221.3\n21.2 Trillion\n10 Trillion\n1.30e+28\n22515.9\n216.2 Trillion\n<br><br>large language models are considerably over-sized, given their respective compute budgets, as shown\nin Figure 1. For example, we \ufb01nd that a 175 billion parameter model should be trained with a compute\nbudget of 4.41 \u00d7 1024 FLOPs and on over 4.2 trillion tokens. A 280 billion Gopher-like model is the\noptimal model to train given a compute budget of approximately 1025 FLOPs and should be trained on\n6.8 trillion tokens. Unless one has a compute budget of 1026 FLOPs (over 250\u00d7 the compute used to\ntrain Gopher), a 1 trillion parameter model is unlikely to be the optimal model to train. Furthermore,\nthe amount of training data that is projected to be needed is far beyond what is currently used to\ntrain large models, and underscores the importance of dataset collection in addition to engineering\nimprovements that allow for model scale. While there is signi\ufb01cant uncertainty extrapolating out\nmany orders of magnitude, our analysis clearly suggests that given the training compute budget for\nmany current LLMs, smaller models should have been trained on more tokens to achieve the most\nperformant model.\n<br><br>In Appendix C, we reproduce the IsoFLOP analysis on two additional datasets: C4 (Ra\ufb00el et al.,\n2020a) and GitHub code (Rae et al., 2021). In both cases we reach the similar conclusion that model\nsize and number of training tokens should be scaled in equal proportions.\n<br><br>8\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 9,
          "text": "4. Chinchilla\n<br><br>Based on our analysis in Section 3, the optimal model size for the Gopher compute budget is somewhere\nbetween 40 and 70 billion parameters. We test this hypothesis by training a model on the larger end\nof this range\u201470B parameters\u2014for 1.4T tokens, due to both dataset and computational e\ufb03ciency\nconsiderations. In this section we compare this model, which we call Chinchilla, to Gopher and other\nLLMs. Both Chinchilla and Gopher have been trained for the same number of FLOPs but di\ufb00er in the\nsize of the model and the number of training tokens.\n<br><br>While pre-training a large language model has a considerable compute cost, downstream \ufb01ne-\ntuning and inference also make up substantial compute usage (Rae et al., 2021). Due to being 4\u00d7\nsmaller than Gopher, both the memory footprint and inference cost of Chinchilla are also smaller.\n<br><br>4.1. Model and training details\n<br><br>The full set of hyperparameters used to train Chinchilla are given in Table 4. Chinchilla uses the same\nmodel architecture and training setup as Gopher with the exception of the di\ufb00erences listed below.\n<br><br>\u2022 We train Chinchilla on MassiveText (the same dataset as Gopher) but use a slightly di\ufb00erent\nsubset distribution (shown in Table A1) to account for the increased number of training tokens.\n\u2022 We use AdamW (Loshchilov and Hutter, 2019) for Chinchilla rather than Adam (Kingma and\nBa, 2014) as this improves the language modelling loss and the downstream task performance\nafter \ufb01netuning.8\n<br><br>\u2022 We train Chinchilla with a slightly modi\ufb01ed SentencePiece (Kudo and Richardson, 2018)\ntokenizer that does not apply NFKC normalisation. The vocabulary is very similar\u2013 94.15% of\ntokens are the same as those used for training Gopher. We \ufb01nd that this particularly helps with\nthe representation of mathematics and chemistry, for example.\n\u2022 Whilst the forward and backward pass are computed in bfloat16, we store a float32 copy\nof the weights in the distributed optimiser state (Rajbhandari et al., 2020). See Lessons Learned\nfrom Rae et al. (2021) for additional details.\n<br><br>In Appendix G we show the impact of the various optimiser related changes between Chinchilla\nand Gopher. All models in this analysis have been trained on TPUv3/TPUv4 (Jouppi et al., 2017) with\nJAX (Bradbury et al., 2018) and Haiku (Hennigan et al., 2020). We include a Chinchilla model card\n(Mitchell et al., 2019) in Table A8.\n<br><br>Model\nLayers\nNumber Heads\nKey/Value Size\ndmodel\nMax LR\nBatch Size\n<br><br>Gopher 280B\n80\n128\n128\n16,384\n4 \u00d7 10\u22125\n3M \u21926M\nChinchilla 70B\n80\n64\n128\n8,192\n1 \u00d7 10\u22124\n1.5M \u21923M\n<br><br>Table 4 | Chinchilla architecture details. We list the number of layers, the key/value size, the\nbottleneck activation size dmodel, the maximum learning rate, and the training batch size (# tokens).\nThe feed-forward size is always set to 4 \u00d7 dmodel. Note that we double the batch size midway through\ntraining for both Chinchilla and Gopher.\n<br><br>8Interestingly, a model trained with AdamW only passes the training performance of a model trained with Adam around\n80% of the way through the cosine cycle, though the ending performance is notably better\u2013 see Figure A7\n<br><br>9\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 10,
          "text": "# Tasks\nExamples\n<br><br>Language Modelling\n20\nWikiText-103, The Pile: PG-19, arXiv, FreeLaw, . . .\nReading Comprehension\n3\nRACE-m, RACE-h, LAMBADA\nQuestion Answering\n3\nNatural Questions, TriviaQA, TruthfulQA\nCommon Sense\n5\nHellaSwag, Winogrande, PIQA, SIQA, BoolQ\nMMLU\n57\nHigh School Chemistry, Astronomy, Clinical Knowledge, . . .\nBIG-bench\n62\nCausal Judgement, Epistemic Reasoning, Temporal Sequences, . . .\n<br><br>Table 5 | All evaluation tasks. We evaluate Chinchilla on a collection of language modelling along\nwith downstream tasks. We evaluate on largely the same tasks as in Rae et al. (2021), to allow for\ndirect comparison.\n<br><br>4.2. Results\n<br><br>We perform an extensive evaluation of Chinchilla, comparing against various large language models.\nWe evaluate on a large subset of the tasks presented in Rae et al. (2021), shown in Table 5. As\nthe focus of this work is on optimal model scaling, we included a large representative subset, and\nintroduce a few new evaluations to allow for better comparison to other existing large models. The\nevaluation details for all tasks are the same as described in Rae et al. (2021).\n<br><br>4.2.1. Language modelling\n<br><br>pubmed_abstracts\n<br><br>nih_exporter\n<br><br>uspto_backgrounds\n<br><br>pubmed_central\n<br><br>pile_cc\n<br><br>bookcorpus2\n<br><br>stackexchange\n<br><br>opensubtitles\n<br><br>openwebtext2\n<br><br>hackernews\n<br><br>dm_mathematics\n<br><br>arxiv\n<br><br>freelaw\n<br><br>books3\n<br><br>philpapers\n<br><br>github\n<br><br>ubuntu_irc\n<br><br>europarl\n<br><br>gutenberg_pg_19\n<br><br>0.00\n<br><br>0.02\n<br><br>0.04\n<br><br>0.06\n<br><br>0.08\n<br><br>0.10\n<br><br>Decrease in bpb \n<br><br> compared to Gopher\n<br><br>Figure 5 | Pile Evaluation. For the di\ufb00erent evaluation sets in The Pile (Gao et al., 2020), we show\nthe bits-per-byte (bpb) improvement (decrease) of Chinchilla compared to Gopher. On all subsets,\nChinchilla outperforms Gopher.\n<br><br>Chinchilla signi\ufb01cantly outperforms Gopher on all evaluation subsets of The Pile (Gao et al.,\n2020), as shown in Figure 5. Compared to Jurassic-1 (178B) Lieber et al. (2021), Chinchilla is more\nperformant on all but two subsets\u2013 dm_mathematics and ubuntu_irc\u2013 see Table A5 for a raw\nbits-per-byte comparison. On Wikitext103 (Merity et al., 2017), Chinchilla achieves a perplexity of\n7.16 compared to 7.75 for Gopher. Some caution is needed when comparing Chinchilla with Gopher\non these language modelling benchmarks as Chinchilla is trained on 4\u00d7 more data than Gopher and\nthus train/test set leakage may arti\ufb01cially enhance the results. We thus place more emphasis on other\n<br><br>10\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 11,
          "text": "Random\n25.0%\nAverage human rater\n34.5%\nGPT-3 5-shot\n43.9%\nGopher 5-shot\n60.0%\nChinchilla 5-shot\n67.6%\nAverage human expert performance\n89.8%\n<br><br>June 2022 Forecast\n57.1%\nJune 2023 Forecast\n63.4%\n<br><br>Table 6 | Massive Multitask Language Understanding (MMLU). We report the average 5-shot\naccuracy over 57 tasks with model and human accuracy comparisons taken from Hendrycks et al.\n(2020). We also include the average prediction for state of the art accuracy in June 2022/2023 made\nby 73 competitive human forecasters in Steinhardt (2021).\n<br><br>tasks for which leakage is less of a concern, such as MMLU (Hendrycks et al., 2020) and BIG-bench\n(BIG-bench collaboration, 2021) along with various closed-book question answering and common\nsense analyses.\n<br><br>4.2.2. MMLU\n<br><br>The Massive Multitask Language Understanding (MMLU) benchmark (Hendrycks et al., 2020) consists\nof a range of exam-like questions on academic subjects. In Table 6, we report Chinchilla\u2019s average\n5-shot performance on MMLU (the full breakdown of results is shown in Table A6). On this benchmark,\nChinchilla signi\ufb01cantly outperforms Gopher despite being much smaller, with an average accuracy of\n67.6% (improving upon Gopher by 7.6%). Remarkably, Chinchilla even outperforms the expert forecast\nfor June 2023 of 63.4% accuracy (see Table 6) (Steinhardt, 2021). Furthermore, Chinchilla achieves\ngreater than 90% accuracy on 4 di\ufb00erent individual tasks\u2013 high_school_gov_and_politics,\ninternational_law, sociology, and us_foreign_policy. To our knowledge, no other model\nhas achieved greater than 90% accuracy on a subset.\n<br><br>In Figure 6, we show a comparison to Gopher broken down by task. Overall, we \ufb01nd that Chin-\nchilla improves performance on the vast majority of tasks. On four tasks (college_mathematics,\neconometrics, moral_scenarios, and formal_logic) Chinchilla underperforms Gopher, and\nthere is no change in performance on two tasks.\n<br><br>4.2.3. Reading comprehension\n<br><br>On the \ufb01nal word prediction dataset LAMBADA (Paperno et al., 2016), Chinchilla achieves 77.4%\naccuracy, compared to 74.5% accuracy from Gopher and 76.6% from MT-NLG 530B (see Table 7). On\nRACE-h and RACE-m (Lai et al., 2017), Chinchilla greatly outperforms Gopher, improving accuracy\nby more than 10% in both cases\u2014see Table 7.\n<br><br>4.2.4. BIG-bench\n<br><br>We analysed Chinchilla on the same set of BIG-bench tasks (BIG-bench collaboration, 2021) reported\nin Rae et al. (2021). Similar to what we observed in MMLU, Chinchilla outperforms Gopher on the\nvast majority of tasks (see Figure 7). We \ufb01nd that Chinchilla improves the average performance\nby 10.7%, reaching an accuracy of 65.1% versus 54.4% for Gopher. Of the 62 tasks we consider,\nChinchilla performs worse than Gopher on only four\u2014crash_blossom, dark_humor_detection,\n<br><br>11\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 12,
          "text": "college_mathematics\n<br><br>econometrics\n<br><br>moral_scenarios\n<br><br>formal_logic\n<br><br>medical_genetics\n<br><br>machine_learning\n<br><br>public_relations\n<br><br>global_facts\n<br><br>business_ethics\n<br><br>electrical_engineering\n<br><br>college_computer_science\n<br><br>world_religions\n<br><br>high_school_us_history\n<br><br>high_school_psychology\n<br><br>management\n<br><br>high_school_computer_science\n<br><br>marketing\n<br><br>high_school_physics\n<br><br>high_school_macroeconomics\n<br><br>sociology\n<br><br>high_school_government_and_politics\n<br><br>high_school_european_history\n<br><br>nutrition\n<br><br>college_medicine\n<br><br>astronomy\n<br><br>logical_fallacies\n<br><br>professional_psychology\n<br><br>miscellaneous\n<br><br>jurisprudence\n<br><br>clinical_knowledge\n<br><br>high_school_geography\n<br><br>high_school_biology\n<br><br>college_biology\n<br><br>college_chemistry\n<br><br>high_school_world_history\n<br><br>us_foreign_policy\n<br><br>virology\n<br><br>philosophy\n<br><br>moral_disputes\n<br><br>human_aging\n<br><br>computer_security\n<br><br>security_studies\n<br><br>international_law\n<br><br>high_school_microeconomics\n<br><br>high_school_statistics\n<br><br>professional_accounting\n<br><br>professional_medicine\n<br><br>prehistory\n<br><br>high_school_chemistry\n<br><br>elementary_mathematics\n<br><br>abstract_algebra\n<br><br>anatomy\n<br><br>professional_law\n<br><br>human_sexuality\n<br><br>college_physics\n<br><br>high_school_mathematics\n<br><br>conceptual_physics\n<br><br>10\n<br><br>0\n<br><br>10\n<br><br>20\n<br><br>30\n<br><br>Relative Improvement \n<br><br> over Gopher\n<br><br>Figure 6 | MMLU results compared to Gopher We \ufb01nd that Chinchilla outperforms Gopher by 7.6%\non average (see Table 6) in addition to performing better on 51/57 individual tasks, the same on\n2/57, and worse on only 4/57 tasks.\n<br><br>Chinchilla\nGopher\nGPT-3\nMT-NLG 530B\n<br><br>LAMBADA Zero-Shot\n77.4\n74.5\n76.2\n76.6\nRACE-m Few-Shot\n86.8\n75.1\n58.1\n-\nRACE-h Few-Shot\n82.3\n71.6\n46.8\n47.9\n<br><br>Table 7 | Reading comprehension. On RACE-h and RACE-m (Lai et al., 2017), Chinchilla considerably\nimproves performance over Gopher. Note that GPT-3 and MT-NLG 530B use a di\ufb00erent prompt format\nthan we do on RACE-h/m, so results are not comparable to Gopher and Chinchilla. On LAMBADA\n(Paperno et al., 2016), Chinchilla outperforms both Gopher and MT-NLG 530B.\n<br><br>mathematical_induction and logical_args. Full accuracy results for Chinchilla can be found\nin Table A7.\n<br><br>4.2.5. Common sense\n<br><br>We evaluate Chinchilla on various common sense benchmarks: PIQA (Bisk et al., 2020), SIQA (Sap\net al., 2019), Winogrande (Sakaguchi et al., 2020), HellaSwag (Zellers et al., 2019), and BoolQ\n(Clark et al., 2019). We \ufb01nd that Chinchilla outperforms both Gopher and GPT-3 on all tasks and\noutperforms MT-NLG 530B on all but one task\u2014see Table 8.\n<br><br>On TruthfulQA (Lin et al., 2021), Chinchilla reaches 43.6%, 58.5%, and 66.7% accuracy with\n0-shot, 5-shot, and 10-shot respectively. In comparison, Gopher achieved only 29.5% 0-shot and 43.7%\n10-shot accuracy. In stark contrast with the \ufb01ndings of Lin et al. (2021), the large improvements\n(14.1% in 0-shot accuracy) achieved by Chinchilla suggest that better modelling of the pre-training\ndata alone can lead to substantial improvements on this benchmark.\n<br><br>12\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 13,
          "text": "crash_blossom\n<br><br>dark_humor_detection\n<br><br>mathematical_induction\n<br><br>logical_args\n<br><br>general_knowledge_json\n<br><br>Human_organs_senses_multiple_choice\n<br><br>formal_fallacies_syllogisms_negation\n<br><br>known_unknowns\n<br><br>navigate\n<br><br>sentence_ambiguity\n<br><br>moral_permissibility\n<br><br>intent_recognition\n<br><br>irony_identification\n<br><br>entailed_polarity\n<br><br>hyperbaton\n<br><br>misconceptions\n<br><br>evaluating_information_essentiality\n<br><br>similarities_abstraction\n<br><br>epistemic_reasoning\n<br><br>fantasy_reasoning\n<br><br>movie_dialog_same_or_different\n<br><br>winowhy\n<br><br>novel_concepts\n<br><br>discourse_marker_prediction\n<br><br>strategyqa\n<br><br>causal_judgment\n<br><br>hindu_knowledge\n<br><br>phrase_relatedness\n<br><br>alignment_questionnaire\n<br><br>reasoning_about_colored_objects\n<br><br>date_understanding\n<br><br>penguins_in_a_table\n<br><br>figure_of_speech_detection\n<br><br>disambiguation_q\n<br><br>implicatures\n<br><br>SNARKS\n<br><br>ruin_names\n<br><br>logical_fallacy_detection\n<br><br>anachronisms\n<br><br>logic_grid_puzzle\n<br><br>riddle_sense\n<br><br>analytic_entailment\n<br><br>question_selection\n<br><br>nonsense_words_grammar\n<br><br>physics_mc\n<br><br>empirical_judgments\n<br><br>sports_understanding\n<br><br>crass_ai\n<br><br>physical_intuition\n<br><br>timedial\n<br><br>implicit_relations\n<br><br>english_proverbs\n<br><br>presuppositions_as_nli\n<br><br>movie_recommendation\n<br><br>understanding_fables\n<br><br>metaphor_boolean\n<br><br>temporal_sequences\n<br><br>logical_sequence\n<br><br>identify_odd_metaphor\n<br><br>gre_reading_comprehension\n<br><br>odd_one_out\n<br><br>analogical_similarity\n<br><br>20\n<br><br>0\n<br><br>20\n<br><br>40\n<br><br>60\n<br><br>80\n<br><br>100\n<br><br>120\n<br><br>Relative Improvement \n<br><br> over Gopher\n<br><br>Figure 7 | BIG-bench results compared to Gopher Chinchilla out performs Gopher on all but four\nBIG-bench tasks considered. Full results are in Table A7.\n<br><br>4.2.6. Closed-book question answering\n<br><br>Results on closed-book question answering benchmarks are reported in Table 9. On the Natural\nQuestions dataset (Kwiatkowski et al., 2019), Chinchilla achieves new closed-book SOTA accuracies:\n31.5% 5-shot and 35.5% 64-shot, compared to 21% and 28% respectively, for Gopher. On TriviaQA\n(Joshi et al., 2017) we show results for both the \ufb01ltered (previously used in retrieval and open-book\nwork) and un\ufb01ltered set (previously used in large language model evaluations). In both cases,\nChinchilla substantially out performs Gopher. On the \ufb01ltered version, Chinchilla lags behind the open\nbook SOTA (Izacard and Grave, 2020) by only 7.9%. On the un\ufb01ltered set, Chinchilla outperforms\nGPT-3\u2014see Table 9.\n<br><br>4.2.7. Gender bias and toxicity\n<br><br>Large Language Models carry potential risks such as outputting o\ufb00ensive language, propagating\nsocial biases, and leaking private information (Bender et al., 2021; Weidinger et al., 2021). We\nexpect Chinchilla to carry risks similar to Gopher because Chinchilla is trained on the same data,\n<br><br>Chinchilla\nGopher\nGPT-3\nMT-NLG 530B\nSupervised SOTA\n<br><br>HellaSWAG\n80.8%\n79.2%\n78.9%\n80.2%\n93.9%\nPIQA\n81.8%\n81.8%\n81.0%\n82.0%\n90.1%\nWinogrande\n74.9%\n70.1%\n70.2%\n73.0%\n91.3%\nSIQA\n51.3%\n50.6%\n-\n-\n83.2%\nBoolQ\n83.7%\n79.3%\n60.5%\n78.2%\n91.4%\n<br><br>Table 8 | Zero-shot comparison on Common Sense benchmarks. We show a comparison between\nChinchilla, Gopher, and MT-NLG 530B on various Common Sense benchmarks. We see that Chinchilla\nmatches or outperforms Gopher and GPT-3 on all tasks. On all but one Chinchilla outperforms the\nmuch larger MT-NLG 530B model.\n<br><br>13\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 14,
          "text": "Method\nChinchilla\nGopher\nGPT-3\nSOTA (open book)\n<br><br>Natural Questions (dev)\n0-shot\n16.6%\n10.1%\n14.6%\n54.4%\n5-shot\n31.5%\n24.5%\n-\n64-shot\n35.5%\n28.2%\n29.9%\n<br><br>TriviaQA (un\ufb01ltered, test)\n0-shot\n67.0%\n52.8%\n64.3 %\n-\n5-shot\n73.2%\n63.6%\n-\n64-shot\n72.3%\n61.3%\n71.2%\n<br><br>TriviaQA (\ufb01ltered, dev)\n0-shot\n55.4%\n43.5%\n-\n72.5%\n5-shot\n64.1%\n57.0%\n-\n64-shot\n64.6%\n57.2%\n-\n<br><br>Table 9 | Closed-book question answering. For Natural Questions (Kwiatkowski et al., 2019) and\nTriviaQA (Joshi et al., 2017), Chinchilla outperforms Gopher in all cases. On Natural Questions,\nChinchilla outperforms GPT-3. On TriviaQA we show results on two di\ufb00erent evaluation sets to allow\nfor comparison to GPT-3 and to open book SOTA (FiD + Distillation (Izacard and Grave, 2020)).\n<br><br>albeit with slightly di\ufb00erent relative weights, and because it has a similar architecture. Here, we\nexamine gender bias (particularly gender and occupation bias) and generation of toxic language. We\nselect a few common evaluations to highlight potential issues, but stress that our evaluations are not\ncomprehensive and much work remains to understand, evaluate, and mitigate risks in LLMs.\n<br><br>Gender bias.\nAs discussed in Rae et al. (2021), large language models re\ufb02ect contemporary and\nhistorical discourse about di\ufb00erent groups (such as gender groups) from their training dataset, and\nwe expect the same to be true for Chinchilla. Here, we test if potential gender and occupation biases\nmanifest in unfair outcomes on coreference resolutions, using the Winogender dataset (Rudinger\net al., 2018) in a zero-shot setting. Winogender tests whether a model can correctly determine if\na pronoun refers to di\ufb00erent occupation words. An unbiased model would correctly predict which\nword the pronoun refers to regardless of pronoun gender. We follow the same setup as in Rae et al.\n(2021) (described further in Section H.3).\n<br><br>As shown in Table 10, Chinchilla correctly resolves pronouns more frequently than Gopher across\nall groups. Interestingly, the performance increase is considerably smaller for male pronouns (increase\nof 3.2%) than for female or neutral pronouns (increases of 8.3% and 9.2% respectively). We also\nconsider gotcha examples, in which the correct pronoun resolution contradicts gender stereotypes\n(determined by labor statistics). Again, we see that Chinchilla resolves pronouns more accurately\nthan Gopher. When breaking up examples by male/female gender and gotcha/not gotcha, the largest\nimprovement is on female gotcha examples (improvement of 10%). Thus, though Chinchilla uniformly\novercomes gender stereotypes for more coreference examples than Gopher, the rate of improvement\nis higher for some pronouns than others, suggesting that the improvements conferred by using a more\ncompute-optimal model can be uneven.\n<br><br>Sample toxicity.\nLanguage models are capable of generating toxic language\u2014including insults,\nhate speech, profanities and threats (Gehman et al., 2020; Rae et al., 2021). While toxicity is an\numbrella term, and its evaluation in LMs comes with challenges (Welbl et al., 2021; Xu et al., 2021),\nautomatic classi\ufb01er scores can provide an indication for the levels of harmful text that a LM generates.\nRae et al. (2021) found that improving language modelling loss by increasing the number of model\nparameters has only a negligible e\ufb00ect on toxic text generation (unprompted); here we analyze\n<br><br>14\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 15,
          "text": "Chinchilla\nGopher\n<br><br>All\n78.3%\n71.4%\nMale\n71.2%\n68.0%\nFemale\n79.6%\n71.3%\nNeutral\n84.2%\n75.0%\n<br><br>Chinchilla\nGopher\n<br><br>Male gotcha\n62.5%\n59.2%\nMale not gotcha\n80.0%\n76.7%\nFemale gotcha\n76.7%\n66.7%\nFemale not gotcha\n82.5%\n75.8%\n<br><br>Table 10 | Winogender results. Left: Chinchilla consistently resolves pronouns better than Gopher.\nRight: Chinchilla performs better on examples which contradict gender stereotypes (gotcha examples).\nHowever, di\ufb00erence in performance across groups suggests Chinchilla exhibits bias.\n<br><br>whether the same holds true for a lower LM loss achieved via more compute-optimal training. Similar\nto the protocol of Rae et al. (2021), we generate 25,000 unprompted samples from Chinchilla, and\ncompare their PerspectiveAPI toxicity score distribution to that of Gopher-generated samples. Several\nsummary statistics indicate an absence of major di\ufb00erences: the mean (median) toxicity score for\nGopher is 0.081 (0.064), compared to 0.087 (0.066) for Chinchilla, and the 95th percentile scores\nare 0.230 for Gopher, compared to 0.238 for Chinchilla. That is, the large majority of generated\nsamples are classi\ufb01ed as non-toxic, and the di\ufb00erence between the models is negligible. In line with\nprior \ufb01ndings (Rae et al., 2021), this suggests that toxicity levels in unconditional text generation\nare largely independent of the model quality (measured in language modelling loss), i.e. that better\nmodels of the training dataset are not necessarily more toxic.\n<br><br>5. Discussion & Conclusion\n<br><br>The trend so far in large language model training has been to increase the model size, often without\nincreasing the number of training tokens. The largest dense transformer, MT-NLG 530B, is now\nover 3\u00d7 larger than GPT-3\u2019s 170 billion parameters from just two years ago. However, this model,\nas well as the majority of existing large models, have all been trained for a comparable number\nof tokens\u2014around 300 billion. While the desire to train these mega-models has led to substantial\nengineering innovation, we hypothesize that the race to train larger and larger models is resulting in\nmodels that are substantially underperforming compared to what could be achieved with the same\ncompute budget.\n<br><br>We propose three predictive approaches towards optimally setting model size and training dura-\ntion, based on the outcome of over 400 training runs. All three approaches predict that Gopher is\nsubstantially over-sized and estimate that for the same compute budget a smaller model trained on\nmore data will perform better. We directly test this hypothesis by training Chinchilla, a 70B parameter\nmodel, and show that it outperforms Gopher and even larger models on nearly every measured\nevaluation task.\n<br><br>Whilst our method allows us to make predictions on how to scale large models when given\nadditional compute, there are several limitations. Due to the cost of training large models, we only\nhave two comparable training runs at large scale (Chinchilla and Gopher), and we do not have\nadditional tests at intermediate scales. Furthermore, we assume that the e\ufb03cient computational\nfrontier can be described by a power-law relationship between the compute budget, model size, and\nnumber of training tokens. However, we observe some concavity in log \u0000\n\ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\n\u0001 at high compute budgets\n(see Appendix E). This suggests that we may still be overestimating the optimal size of large models.\nFinally, the training runs for our analysis have all been trained on less than an epoch of data; future\nwork may consider the multiple epoch regime. Despite these limitations, the comparison of Chinchilla\nto Gopher validates our performance predictions, that have thus enabled training a better (and more\n<br><br>15\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 16,
          "text": "lightweight) model at the same compute budget.\n<br><br>Though there has been signi\ufb01cant recent work allowing larger and larger models to be trained,\nour analysis suggests an increased focus on dataset scaling is needed. Speculatively, we expect that\nscaling to larger and larger datasets is only bene\ufb01cial when the data is high-quality. This calls for\nresponsibly collecting larger datasets with a high focus on dataset quality. Larger datasets will require\nextra care to ensure train-test set overlap is properly accounted for, both in the language modelling\nloss but also with downstream tasks. Finally, training for trillions of tokens introduces many ethical\nand privacy concerns. Large datasets scraped from the web will contain toxic language, biases, and\nprivate information. With even larger datasets being used, the quantity (if not the frequency) of such\ninformation increases, which makes dataset introspection all the more important. Chinchilla does\nsu\ufb00er from bias and toxicity but interestingly it seems less a\ufb00ected than Gopher. Better understanding\nhow performance of large language models and toxicity interact is an important future research\nquestion.\n<br><br>While we have applied our methodology towards the training of auto-regressive language models,\nwe expect that there is a similar trade-o\ufb00between model size and the amount of data in other\nmodalities. As training large models is very expensive, choosing the optimal model size and training\nsteps beforehand is essential. The methods we propose are easy to reproduce in new settings.\n<br><br>6. Acknowledgements\n<br><br>We\u2019d like to thank Jean-baptiste Alayrac, Kareem Ayoub, Chris Dyer, Nando de Freitas, Demis Hassabis,\nGeo\ufb00rey Irving, Koray Kavukcuoglu, Nate Kushman and Angeliki Lazaridou for useful comments on\nthe manuscript. We\u2019d like to thank Andy Brock, Irina Higgins, Michela Paganini, Francis Song, and\nother colleagues at DeepMind for helpful discussions. We are also very grateful to the JAX and XLA\nteam for their support and assistance.\n<br><br>References\n<br><br>M. Artetxe, S. Bhosale, N. Goyal, T. Mihaylov, M. Ott, S. Shleifer, X. V. Lin, J. Du, S. Iyer, R. Pasunuru,\nG. Anantharaman, X. Li, S. Chen, H. Akin, M. Baines, L. Martin, X. Zhou, P. S. Koura, B. O\u2019Horo,\nJ. Wang, L. Zettlemoyer, M. Diab, Z. Kozareva, and V. Stoyanov. E\ufb03cient Large Scale Language\nModeling with Mixtures of Experts. arXiv:2112.10684, 2021.\n<br><br>E. M. Bender, T. Gebru, A. McMillan-Major, and S. Shmitchell. On the dangers of stochastic parrots:\nCan language models be too big?\nIn Proceedings of the 2021 ACM Conference on Fairness,\nAccountability, and Transparency, pages 610\u2013623, 2021.\n<br><br>BIG-bench collaboration. Beyond the imitation game: Measuring and extrapolating the capabilities of\nlanguage models. In preparation, 2021. URL https://github.com/google/BIG-bench/.\n<br><br>Y. Bisk, R. Zellers, J. Gao, Y. Choi, et al. PIQA: Reasoning about physical commonsense in natural\nlanguage. In Proceedings of the AAAI Conference on Arti\ufb01cial Intelligence, volume 34, pages\n7432\u20137439, 2020.\n<br><br>S. Borgeaud, A. Mensch, J. Ho\ufb00mann, T. Cai, E. Rutherford, K. Millican, G. van den Driessche, J.-B.\nLespiau, B. Damoc, A. Clark, D. de Las Casas, A. Guy, J. Menick, R. Ring, T. Hennigan, S. Huang,\nL. Maggiore, C. Jones, A. Cassirer, A. Brock, M. Paganini, G. Irving, O. Vinyals, S. Osindero,\nK. Simonyan, J. W. Rae, E. Elsen, and L. Sifre. Improving language models by retrieving from\ntrillions of tokens. arXiv 2112.04426, 2021.\n<br><br>16\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 17,
          "text": "J. Bradbury, R. Frostig, P. Hawkins, M. J. Johnson, C. Leary, D. Maclaurin, G. Necula, A. Paszke, J. Van-\nderPlas, S. Wanderman-Milne, and Q. Zhang. JAX: composable transformations of Python+NumPy\nprograms. 2018. URL http://github.com/google/jax.\n<br><br>T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam,\nG. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh,\nD. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark,\nC. Berner, S. McCandlish, A. Radford, I. Sutskever, and D. Amodei. Language models are few-shot\nlearners. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin, editors, Advances\nin Neural Information Processing Systems, volume 33, pages 1877\u20131901. Curran Associates, Inc.,\n2020. URL https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb49674\n18bfb8ac142f64a-Paper.pdf.\n<br><br>S. Bubeck. Convex Optimization: Algorithms and Complexity. Foundations and Trends in Machine\n<br><br>Learning, 8(3-4):231\u2013357, 2015. URL http://www.nowpublishers.com/article/Detail\ns/MAL-050.\n<br><br>A. Clark, D. d. l. Casas, A. Guy, A. Mensch, M. Paganini, J. Ho\ufb00mann, B. Damoc, B. Hechtman,\nT. Cai, S. Borgeaud, G. v. d. Driessche, E. Rutherford, T. Hennigan, M. Johnson, K. Millican,\nA. Cassirer, C. Jones, E. Buchatskaya, D. Budden, L. Sifre, S. Osindero, O. Vinyals, J. Rae, E. Elsen,\nK. Kavukcuoglu, and K. Simonyan. Uni\ufb01ed scaling laws for routed language models, 2022. URL\nhttps://arxiv.org/abs/2202.01169.\n<br><br>C. Clark, K. Lee, M.-W. Chang, T. Kwiatkowski, M. Collins, and K. Toutanova. Boolq: Exploring\nthe surprising di\ufb03culty of natural yes/no questions. In Proceedings of the 2019 Conference of\nthe North American Chapter of the Association for Computational Linguistics: Human Language\nTechnologies, Volume 1 (Long and Short Papers), pages 2924\u20132936, 2019.\n<br><br>N. Du, Y. Huang, A. M. Dai, S. Tong, D. Lepikhin, Y. Xu, M. Krikun, Y. Zhou, A. W. Yu, O. Firat, B. Zoph,\nL. Fedus, M. Bosma, Z. Zhou, T. Wang, Y. E. Wang, K. Webster, M. Pellat, K. Robinson, K. Meier-\nHellstern, T. Duke, L. Dixon, K. Zhang, Q. V. Le, Y. Wu, Z. Chen, and C. Cui. Glam: E\ufb03cient scaling of\nlanguage models with mixture-of-experts, 2021. URL https://arxiv.org/abs/2112.06905.\n<br><br>W. Fedus, B. Zoph, and N. Shazeer. Switch transformers: Scaling to trillion parameter models with\nsimple and e\ufb03cient sparsity. arXiv preprint arXiv:2101.03961, 2021.\n<br><br>L. Gao, S. Biderman, S. Black, L. Golding, T. Hoppe, C. Foster, J. Phang, H. He, A. Thite, N. Nabeshima,\nS. Presser, and C. Leahy. The Pile: An 800GB dataset of diverse text for language modeling. arXiv\npreprint arXiv:2101.00027, 2020.\n<br><br>S. Gehman, S. Gururangan, M. Sap, Y. Choi, and N. A. Smith. RealToxicityPrompts: Evaluating\nneural toxic degeneration in language models. In Findings of the Association for Computational\nLinguistics: EMNLP 2020, pages 3356\u20133369, Online, Nov. 2020. Association for Computational\nLinguistics. doi: 10.18653/v1/2020.findings-emnlp.301. URL https://aclanthology.org/2\n020.findings-emnlp.301.\n<br><br>K. Guu, K. Lee, Z. Tung, P. Pasupat, and M.-W. Chang. REALM: Retrieval-augmented language model\npre-training, 2020.\n<br><br>D. Hendrycks, C. Burns, S. Basart, A. Zou, M. Mazeika, D. Song, and J. Steinhardt. Measuring massive\nmultitask language understanding. arXiv preprint arXiv:2009.03300, 2020.\n<br><br>T. Hennigan, T. Cai, T. Norman, and I. Babuschkin. Haiku: Sonnet for JAX. 2020. URL http:\n//github.com/deepmind/dm-haiku.\n<br><br>17\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 18,
          "text": "D. Hernandez, J. Kaplan, T. Henighan, and S. McCandlish. Scaling laws for transfer, 2021.\n<br><br>P. J. Huber. Robust Estimation of a Location Parameter. The Annals of Mathematical Statistics, 35\n(1):73\u2013101, Mar. 1964. ISSN 0003-4851, 2168-8990. doi: 10.1214/aoms/1177703732. URL\n<br><br>https://projecteuclid.org/journals/annals-of-mathematical-statistics/vol\nume-35/issue-1/Robust-Estimation-of-a-Location-Parameter/10.1214/aoms/11\n77703732.full.\n<br><br>G. Izacard and E. Grave. Distilling knowledge from reader to retriever for question answering, 2020.\n<br><br>M. Joshi, E. Choi, D. Weld, and L. Zettlemoyer. TriviaQA: A Large Scale Distantly Supervised Challenge\nDataset for Reading Comprehension. arXiv e-prints, art. arXiv:1705.03551, 2017.\n<br><br>N. P. Jouppi, C. Young, N. Patil, D. Patterson, G. Agrawal, R. Bajwa, S. Bates, S. Bhatia, N. Boden,\nA. Borchers, R. Boyle, P.-l. Cantin, C. Chao, C. Clark, J. Coriell, M. Daley, M. Dau, J. Dean, B. Gelb,\nT. V. Ghaemmaghami, R. Gottipati, W. Gulland, R. Hagmann, C. R. Ho, D. Hogberg, J. Hu, R. Hundt,\nD. Hurt, J. Ibarz, A. Ja\ufb00ey, A. Jaworski, A. Kaplan, H. Khaitan, D. Killebrew, A. Koch, N. Kumar, S. Lacy,\nJ. Laudon, J. Law, D. Le, C. Leary, Z. Liu, K. Lucke, A. Lundin, G. MacKean, A. Maggiore, M. Mahony,\nK. Miller, R. Nagarajan, R. Narayanaswami, R. Ni, K. Nix, T. Norrie, M. Omernick, N. Penukonda,\nA. Phelps, J. Ross, M. Ross, A. Salek, E. Samadiani, C. Severn, G. Sizikov, M. Snelham, J. Souter,\nD. Steinberg, A. Swing, M. Tan, G. Thorson, B. Tian, H. Toma, E. Tuttle, V. Vasudevan, R. Walter,\nW. Wang, E. Wilcox, and D. H. Yoon. In-datacenter performance analysis of a tensor processing unit.\nIn Proceedings of the 44th Annual International Symposium on Computer Architecture, ISCA \u201917,\npage 1\u201312, New York, NY, USA, 2017. Association for Computing Machinery. ISBN 9781450348928.\ndoi: 10.1145/3079856.3080246. URL https://doi.org/10.1145/3079856.3080246.\n<br><br>J. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu,\nand D. Amodei. Scaling laws for neural language models. arXiv preprint arXiv:2001.08361, 2020.\n<br><br>D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980,\n2014.\n<br><br>T. Kudo and J. Richardson. SentencePiece: A simple and language independent subword tokenizer\nand detokenizer for neural text processing. arXiv preprint arXiv:1808.06226, 2018.\n<br><br>T. Kwiatkowski, J. Palomaki, O. Red\ufb01eld, M. Collins, A. Parikh, C. Alberti, D. Epstein, I. Polosukhin,\nM. Kelcey, J. Devlin, K. Lee, K. N. Toutanova, L. Jones, M.-W. Chang, A. Dai, J. Uszkoreit, Q. Le, and\nS. Petrov. Natural questions: a benchmark for question answering research. Transactions of the\nAssociation of Computational Linguistics, 2019.\n<br><br>G. Lai, Q. Xie, H. Liu, Y. Yang, and E. Hovy. RACE: Large-scale ReAding comprehension dataset from\nexaminations. In Proceedings of the 2017 Conference on Empirical Methods in Natural Language\nProcessing, pages 785\u2013794, Copenhagen, Denmark, Sept. 2017. Association for Computational\nLinguistics. doi: 10.18653/v1/D17-1082. URL https://aclanthology.org/D17-1082.\n<br><br>Y. Levine, N. Wies, O. Sharir, H. Bata, and A. Shashua. The depth-to-width interplay in self-attention.\n<br><br>arXiv preprint arXiv:2006.12467, 2020.\n<br><br>P. Lewis, E. Perez, A. Piktus, F. Petroni, V. Karpukhin, N. Goyal, H. K\u00fcttler, M. Lewis, W.-t. Yih,\nT. Rockt\u00e4schel, S. Riedel, and D. Kiela. Retrieval-augmented generation for knowledge-intensive\nnlp tasks. In Advances in Neural Information Processing Systems, volume 33, pages 9459\u20139474,\n2020.\n<br><br>18\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 19,
          "text": "O. Lieber, O. Sharir, B. Lenz, and Y. Shoham. Jurassic-1: Technical details and evaluation. White\n<br><br>Paper. AI21 Labs, 2021.\n<br><br>S. Lin, J. Hilton, and O. Evans. TruthfulQA: Measuring how models mimic human falsehoods. arXiv\n<br><br>preprint arXiv:2109.07958, 2021.\n<br><br>I. Loshchilov and F. Hutter. Decoupled weight decay regularization. In International Conference on\n<br><br>Learning Representations, 2019. URL https://openreview.net/forum?id=Bkg6RiCqY7.\n<br><br>S. McCandlish, J. Kaplan, D. Amodei, and O. D. Team. An empirical model of large-batch training,\n2018.\n<br><br>S. Merity, C. Xiong, J. Bradbury, and R. Socher. Pointer sentinel mixture models. International\n<br><br>Conference on Learning Representations, 2017.\n<br><br>M. Mitchell, S. Wu, A. Zaldivar, P. Barnes, L. Vasserman, B. Hutchinson, E. Spitzer, I. D. Raji, and T. Ge-\nbru. Model cards for model reporting. In Proceedings of the conference on fairness, accountability,\nand transparency, pages 220\u2013229, 2019.\n<br><br>J. Nocedal. Updating Quasi-Newton Matrices with Limited Storage. Mathematics of Computation,\n35(151):773\u2013782, 1980. ISSN 0025-5718. doi: 10.2307/2006193. URL https://www.jstor.\norg/stable/2006193.\n<br><br>D. Paperno, G. Kruszewski, A. Lazaridou, Q. N. Pham, R. Bernardi, S. Pezzelle, M. Baroni, G. Boleda,\nand R. Fern\u00e1ndez. The LAMBADA dataset: Word prediction requiring a broad discourse context,\n2016.\n<br><br>J. Rae, S. Borgeaud, T. Cai, K. Millican, J. Ho\ufb00mann, F. Song, J. Aslanides, S. Henderson, R. Ring,\nS. Young, E. Rutherford, T. Hennigan, J. Menick, A. Cassirer, R. Powell, G. van den Driessche, L. A.\nHendricks, M. Rauh, P.-S. Huang, A. Glaese, J. Welbl, S. Dathathri, S. Huang, J. Uesato, J. Mellor,\nI. Higgins, A. Creswell, N. McAleese, A. Wu, E. Elsen, S. Jayakumar, E. Buchatskaya, D. Budden,\nE. Sutherland, K. Simonyan, M. Paganini, L. Sifre, L. Martens, X. L. Li, A. Kuncoro, A. Nematzadeh,\nE. Gribovskaya, D. Donato, A. Lazaridou, A. Mensch, J.-B. Lespiau, M. Tsimpoukelli, N. Grigorev,\nD. Fritz, T. Sottiaux, M. Pajarskas, T. Pohlen, Z. Gong, D. Toyama, C. de Masson d\u2019Autume, Y. Li,\nT. Terzi, I. Babuschkin, A. Clark, D. de Las Casas, A. Guy, J. Bradbury, M. Johnson, L. Weidinger,\nI. Gabriel, W. Isaac, E. Lockhart, S. Osindero, L. Rimell, C. Dyer, O. Vinyals, K. Ayoub, J. Stanway,\nL. Bennett, D. Hassabis, K. Kavukcuoglu, and G. Irving. Scaling language models: Methods, analysis\n& insights from training Gopher. arXiv 2112.11446, 2021.\n<br><br>J. W. Rae, A. Potapenko, S. M. Jayakumar, T. P. Lillicrap, K. Choromanski, V. Likhosherstov, D. Dohan,\nX. Song, A. Gane, T. Sarlos, et al. Compressive transformers for long-range sequence modelling.\nAdvances in Neural Information Processing Systems, 33:6154\u20136158, 2020.\n<br><br>C. Ra\ufb00el, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring\nthe limits of transfer learning with a uni\ufb01ed text-to-text transformer. Journal of Machine Learning\nResearch, 21(140):1\u201367, 2020a. URL http://jmlr.org/papers/v21/20-074.html.\n<br><br>C. Ra\ufb00el, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring\nthe limits of transfer learning with a uni\ufb01ed text-to-text transformer. Journal of Machine Learning\nResearch, 21(140):1\u201367, 2020b.\n<br><br>S. Rajbhandari, J. Rasley, O. Ruwase, and Y. He. Zero: Memory optimizations toward training\ntrillion parameter models. In SC20: International Conference for High Performance Computing,\nNetworking, Storage and Analysis, pages 1\u201316. IEEE, 2020.\n<br><br>19\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 20,
          "text": "H. Robbins and S. Monro. A Stochastic Approximation Method. The Annals of Mathematical Statistics,\n22(3):400\u2013407, Sept. 1951.\n<br><br>R. Rudinger, J. Naradowsky, B. Leonard, and B. Van Durme. Gender bias in coreference resolu-\ntion. In Proceedings of the 2018 Conference of the North American Chapter of the Association for\nComputational Linguistics: Human Language Technologies, New Orleans, Louisiana, June 2018.\nAssociation for Computational Linguistics.\n<br><br>K. Sakaguchi, R. Le Bras, C. Bhagavatula, and Y. Choi. Winogrande: An adversarial winograd schema\nchallenge at scale. In Proceedings of the AAAI Conference on Arti\ufb01cial Intelligence, volume 34,\npages 8732\u20138740, 2020.\n<br><br>M. Sap, H. Rashkin, D. Chen, R. LeBras, and Y. Choi. SocialIQA: Commonsense reasoning about\nsocial interactions. Proceedings of the 2019 Conference on Empirical Methods in Natural Language\nProcessing, 2019.\n<br><br>C. J. Shallue, J. Lee, J. Antognini, J. Sohl-Dickstein, R. Frostig, and G. E. Dahl. Measuring the e\ufb00ects\nof data parallelism on neural network training. arXiv preprint arXiv:1811.03600, 2018.\n<br><br>J. W. Siegel and J. Xu. Approximation rates for neural networks with general activation functions.\n<br><br>Neural Networks, 128:313\u2013321, Aug. 2020. URL https://www.sciencedirect.com/scienc\ne/article/pii/S0893608020301891.\n<br><br>S. Smith, M. Patwary, B. Norick, P. LeGresley, S. Rajbhandari, J. Casper, Z. Liu, S. Prabhumoye,\nG. Zerveas, V. Korthikanti, E. Zhang, R. Child, R. Y. Aminabadi, J. Bernauer, X. Song, M. Shoeybi,\nY. He, M. Houston, S. Tiwary, and B. Catanzaro. Using Deepspeed and Megatron to Train Megatron-\nturing NLG 530b, A Large-Scale Generative Language Model. arXiv preprint arXiv:2201.11990,\n2022.\n<br><br>J. Steinhardt. Updates and lessons from AI forecasting, 2021. URL https://bounded-regret.g\nhost.io/ai-forecasting/.\n<br><br>Y. Tay, M. Dehghani, J. Rao, W. Fedus, S. Abnar, H. W. Chung, S. Narang, D. Yogatama, A. Vaswani,\nand D. Metzler. Scale e\ufb03ciently: Insights from pre-training and \ufb01ne-tuning transformers, 2021.\n<br><br>R. Thoppilan, D. D. Freitas, J. Hall, N. Shazeer, A. Kulshreshtha, H.-T. Cheng, A. Jin, T. Bos, L. Baker,\nY. Du, Y. Li, H. Lee, H. S. Zheng, A. Ghafouri, M. Menegali, Y. Huang, M. Krikun, D. Lepikhin,\nJ. Qin, D. Chen, Y. Xu, Z. Chen, A. Roberts, M. Bosma, Y. Zhou, C.-C. Chang, I. Krivokon, W. Rusch,\nM. Pickett, K. Meier-Hellstern, M. R. Morris, T. Doshi, R. D. Santos, T. Duke, J. Soraker, B. Zeven-\nbergen, V. Prabhakaran, M. Diaz, B. Hutchinson, K. Olson, A. Molina, E. Ho\ufb00man-John, J. Lee,\nL. Aroyo, R. Rajakumar, A. Butryna, M. Lamm, V. Kuzmina, J. Fenton, A. Cohen, R. Bernstein,\nR. Kurzweil, B. Aguera-Arcas, C. Cui, M. Croak, E. Chi, and Q. Le. LaMDA: Language models for\ndialog applications, 2022.\n<br><br>A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, \u0141. Kaiser, and I. Polosukhin.\nAttention is all you need. In Advances in neural information processing systems, pages 5998\u20136008,\n2017.\n<br><br>L. Weidinger, J. Mellor, M. Rauh, C. Gri\ufb03n, J. Uesato, P.-S. Huang, M. Cheng, M. Glaese, B. Balle,\nA. Kasirzadeh, Z. Kenton, S. Brown, W. Hawkins, T. Stepleton, C. Biles, A. Birhane, J. Haas, L. Rimell,\nL. A. Hendricks, W. Isaac, S. Legassick, G. Irving, and I. Gabriel. Ethical and social risks of harm\nfrom language models. arXiv submission, 2021.\n<br><br>20\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 21,
          "text": "J. Welbl, A. Glaese, J. Uesato, S. Dathathri, J. Mellor, L. A. Hendricks, K. Anderson, P. Kohli, B. Coppin,\nand P.-S. Huang. Challenges in detoxifying language models. In Findings of the Association for\nComputational Linguistics: EMNLP 2021, pages 2447\u20132469, Punta Cana, Dominican Republic,\nNov. 2021. Association for Computational Linguistics. URL https://aclanthology.org/2021.\nfindings-emnlp.210.\n<br><br>A. Xu, E. Pathak, E. Wallace, S. Gururangan, M. Sap, and D. Klein. Detoxifying language models\nrisks marginalizing minority voices. In Proceedings of the 2021 Conference of the North American\nChapter of the Association for Computational Linguistics: Human Language Technologies, pages\n2390\u20132397, Online, June 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021\n.naacl-main.190. URL https://aclanthology.org/2021.naacl-main.190.\n<br><br>G. Yang, E. J. Hu, I. Babuschkin, S. Sidor, X. Liu, D. Farhi, N. Ryder, J. Pachocki, W. Chen, and J. Gao.\nTuning large neural networks via zero-shot hyperparameter transfer. In A. Beygelzimer, Y. Dauphin,\nP. Liang, and J. W. Vaughan, editors, Advances in Neural Information Processing Systems, 2021.\nURL https://openreview.net/forum?id=Bx6qKuBM2AD.\n<br><br>R. Zellers, A. Holtzman, Y. Bisk, A. Farhadi, and Y. Choi. HellaSwag: Can a machine really \ufb01nish\nyour sentence? In Proceedings of the 57th Annual Meeting of the Association for Computational\nLinguistics, 2019.\n<br><br>G. Zhang, L. Li, Z. Nado, J. Martens, S. Sachdeva, G. Dahl, C. Shallue, and R. B. Grosse. Which\nalgorithmic choices matter at which batch sizes? insights from a noisy quadratic model. In\nH. Wallach, H. Larochelle, A. Beygelzimer, F. d'Alch\u00e9-Buc, E. Fox, and R. Garnett, editors, Advances\nin Neural Information Processing Systems, volume 32. Curran Associates, Inc., 2019. URL https:\n//proceedings.neurips.cc/paper/2019/file/e0eacd983971634327ae1819ea8b621\n4-Paper.pdf.\n<br><br>B. Zoph, I. Bello, S. Kumar, N. Du, Y. Huang, J. Dean, N. Shazeer, and W. Fedus. Designing e\ufb00ective\nsparse expert models, 2022.\n<br><br>21\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 22,
          "text": "Appendix\n<br><br>A. Training dataset\n<br><br>In Table A1 we show the training dataset makeup used for Chinchilla and all scaling runs. Note that\nboth the MassiveWeb and Wikipedia subsets are both used for more than one epoch.\n<br><br>Disk Size\nDocuments\nSampling proportion\nEpochs in 1.4T tokens\n<br><br>MassiveWeb\n1.9 TB\n604M\n45% (48%)\n1.24\nBooks\n2.1 TB\n4M\n30% (27%)\n0.75\nC4\n0.75 TB\n361M\n10% (10%)\n0.77\nNews\n2.7 TB\n1.1B\n10% (10%)\n0.21\nGitHub\n3.1 TB\n142M\n4% (3%)\n0.13\nWikipedia\n0.001 TB\n6M\n1% (2%)\n3.40\n<br><br>Table A1 | MassiveText data makeup. For each subset of MassiveText, we list its total disk size, the\nnumber of documents and the sampling proportion used during training\u2014we use a slightly di\ufb00erent\ndistribution than in Rae et al. (2021) (shown in parenthesis). In the rightmost column show the\nnumber of epochs that are used in 1.4 trillion tokens.\n<br><br>B. Optimal cosine cycle length\n<br><br>One key assumption is made on the cosine cycle length and the corresponding learning rate drop\n(we use a 10\u00d7 learning rate decay in line with Rae et al. (2021)).9 We \ufb01nd that setting the cosine\ncycle length too much longer than the target number of training steps results in sub-optimally trained\nmodels, as shown in Figure A1. As a result, we assume that an optimally trained model will have the\ncosine cycle length correctly calibrated to the maximum number of steps, given the FLOP budget; we\nfollow this rule in our main analysis.\n<br><br>C. Consistency of scaling results across datasets\n<br><br>We show scaling results from an IsoFLOP (Approach 2) analysis after training on two di\ufb00erent datasets:\nC4 (Ra\ufb00el et al., 2020b) and GitHub code (we show results with data from Rae et al. (2021)), results\nare shown in Table A2. For both set of experiments using subsets of MassiveText, we use the same\ntokenizer as the MassiveText experiments.\n<br><br>We \ufb01nd that the scaling behaviour on these datasets is very similar to what we found on MassiveText,\nas shown in Figure A2 and Table A2. This suggests that our results are independent of the dataset as\nlong as one does not train for more than one epoch.\n<br><br>9We \ufb01nd the di\ufb00erence between decaying by 10\u00d7 and decaying to 0.0 (over the same number of steps) to be small,\nthough decaying by a factor of 10\u00d7 to be slightly more performant. Decaying by less (5\u00d7) is clearly worse.\n<br><br>22\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 23,
          "text": "0\n2\n4\n6\n8\nMillion Sequences\n<br><br>0.0\n<br><br>0.2\n<br><br>0.4\n<br><br>0.6\n<br><br>0.8\n<br><br>1.0\n<br><br>Learning Rate/Max LR\n<br><br>0\n2\n4\n6\n8\nMillion Sequences\n<br><br>2.70\n<br><br>2.75\n<br><br>2.80\n<br><br>2.85\n<br><br>2.90\n<br><br>2.95\n<br><br>3.00\n<br><br>Training Loss\n<br><br>0\n2\n4\n6\nMillion Sequences\n<br><br>2.80\n<br><br>2.85\n<br><br>2.90\n<br><br>2.95\n<br><br>3.00\n<br><br>3.05\n<br><br>3.10\n<br><br>3.15\n<br><br>3.20\n<br><br>C4 Loss\n<br><br>Cosine Cycle Length\n<br><br>1.0\u00d7 num. steps\n1.1\u00d7 num. steps\n<br><br>1.25\u00d7 num. steps\n1.5\u00d7 num. steps\n<br><br>2.0\u00d7 num. steps\n<br><br>5.0\u00d7 num. steps\n<br><br>0.0\n2.5\n5.0\n7.5\n10.0\n12.5\nMillion Sequences\n<br><br>0.0\n<br><br>0.2\n<br><br>0.4\n<br><br>0.6\n<br><br>0.8\n<br><br>1.0\n<br><br>Learning Rate/Max LR\n<br><br>0.0\n2.5\n5.0\n7.5\n10.0\n12.5\nMillion Sequences\n<br><br>2.70\n<br><br>2.75\n<br><br>2.80\n<br><br>2.85\n<br><br>2.90\n<br><br>2.95\n<br><br>3.00\n<br><br>Training Loss\n<br><br>0.0\n2.5\n5.0\n7.5\n10.0\n12.5\nMillion Sequences\n<br><br>2.80\n<br><br>2.85\n<br><br>2.90\n<br><br>2.95\n<br><br>3.00\n<br><br>3.05\n<br><br>3.10\n<br><br>3.15\n<br><br>3.20\n<br><br>C4 Loss\n<br><br>Figure A1 | Grid over cosine cycle length. We show 6 curves with the cosine cycle length set to 1,\n1.1, 1.25, 1.5, 2, and 5\u00d7 longer than the target number of training steps. When the cosine cycle length\nis too long, and the learning rate does not drop appropriately, then performance is impaired. We \ufb01nd\nthat overestimating the number of training steps beyond 25% leads to clear drops in performance.\nWe show results where we have set the number of training steps to two di\ufb00erent values (top and\nbottom).\n<br><br>100M\n300M\n1B\n3B\n6B\n30B\nParameters\n<br><br>2.0\n<br><br>2.2\n<br><br>2.4\n<br><br>2.6\n<br><br>2.8\n<br><br>3.0\n<br><br>3.2\n<br><br>C4 Training Loss\n<br><br>1e19\n1e20\n6e20\n1e21\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>Parameters\n<br><br>73B\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>10T\n<br><br>Tokens\n<br><br>1.3T\n<br><br>100M\n300M\n1B\n3B\n6B\n30B\nParameters\n<br><br>0.2\n<br><br>0.3\n<br><br>0.4\n<br><br>0.5\n<br><br>0.6\n<br><br>0.7\n<br><br>0.8\n<br><br>0.9\n<br><br>1.0\n<br><br>GitHub Training Loss\n<br><br>1e19\n1e20\n6e20\n1e21\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>Parameters\n<br><br>59B\n<br><br>1017\n1019\n1021\n1023\n1025\nFLOPs\n<br><br>100M\n<br><br>1B\n<br><br>10B\n<br><br>100B\n<br><br>1T\n<br><br>10T\n<br><br>Tokens\n<br><br>1.6T\n<br><br>Figure A2 | C4 and GitHub IsoFLOP curves. Using the C4 dataset (Ra\ufb00el et al., 2020b) and a GitHub\ndataset (Rae et al., 2021), we generate 4 IsoFLOP pro\ufb01les and show the parameter and token count\nscaling, as in Figure 3. Scaling coe\ufb03cients are shown in Table A2.\n<br><br>23\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 24,
          "text": "Approach\nCoef. \ud835\udc4ewhere \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4e\nCoef. \ud835\udc4fwhere \ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4f\n<br><br>C4\n0.50\n0.50\nGitHub\n0.53\n0.47\n<br><br>Kaplan et al. (2020)\n0.73\n0.27\n<br><br>Table A2 | Estimated parameter and data scaling with increased training compute on two al-\nternate datasets. The listed values are the exponents, \ud835\udc4eand \ud835\udc4f, on the relationship \ud835\udc41\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4eand\n\ud835\udc37\ud835\udc5c\ud835\udc5d\ud835\udc61\u221d\ud835\udc36\ud835\udc4f. Using IsoFLOP pro\ufb01les, we estimate the scaling on two di\ufb00erent datasets.\n<br><br>D. Details on the scaling analyses\n<br><br>D.1. Approach 1: Fixing model sizes and varying training sequences\n<br><br>We use a maximum learning rate of 2 \u00d7 10\u22124 for the smallest models and 1.25 \u00d7 10\u22124 for the largest\nmodels. In all cases, the learning rate drops by a factor of 10\u00d7 during training, using a cosine schedule.\nWe make the assumption that the cosine cycle length should be approximately matched to the number\nof training steps. We \ufb01nd that when the cosine cycle overshoots the number of training steps by more\nthan 25%, performance is noticeably degraded\u2014see Figure A1.10 We use Gaussian smoothing with a\nwindow length of 10 steps to smooth the training curve.\n<br><br>D.2. Approach 3: Parametric \ufb01tting of the loss\n<br><br>In this section, we \ufb01rst show how Equation (2) can be derived. We repeat the equation below for\nclarity,\n^\ud835\udc3f(\ud835\udc41, \ud835\udc37) \u225c\ud835\udc38+ \ud835\udc34\n<br><br>\ud835\udc41\ud835\udefc+ \ud835\udc35\n<br><br>\ud835\udc37\ud835\udefd,\n(5)\n<br><br>based on a decomposition of the expected risk between a function approximation term and an\noptimisation suboptimality term. We then give details on the optimisation procedure for \ufb01tting the\nparameters.\n<br><br>Loss decomposition.\nFormally, we consider the task of predicting the next token \ud835\udc66\u2208Y based on\nthe previous tokens in a sequence \ud835\udc65\u2208Y\ud835\udc60, with \ud835\udc60varying from 0 to \ud835\udc60max\u2014the maximum sequence\nlength. We consider a distribution \ud835\udc43\u2208D(X \u00d7 Y) of tokens in Y and their past in X. A predictor\n\ud835\udc53: X \u2192D(Y) computes the probability of each token given the past sequence. The Bayes classi\ufb01er,\n\ud835\udc53\u2605, minimizes the cross-entropy of \ud835\udc53(\ud835\udc65) with the observed tokens \ud835\udc66, with expectation taken on the\nwhole data distribution. We let \ud835\udc3fbe the expected risk\n<br><br>\ud835\udc3f( \ud835\udc53) \u225c\ud835\udd3c[log \ud835\udc53(\ud835\udc65)\ud835\udc66],\nand set\n\ud835\udc53\u2605\u225c\nargmin\n\ud835\udc53\u2208F(X,D(Y))\n\ud835\udc3f( \ud835\udc53).\n(6)\n<br><br>The set of all transformers of size \ud835\udc41, that we denote H\ud835\udc41, forms a subset of all functions that map\nsequences to distributions of tokens X \u2192D(Y). Fitting a transformer of size \ud835\udc41on the expected risk\n\ud835\udc3f( \ud835\udc53) amounts to minimizing such risk on a restricted functional space\n<br><br>\ud835\udc53\ud835\udc41\u225cargmin\n\ud835\udc53\u2208H\ud835\udc41\n\ud835\udc3f( \ud835\udc53).\n(7)\n<br><br>When we observe a dataset (\ud835\udc65\ud835\udc56, \ud835\udc66\ud835\udc56)\ud835\udc56\ud835\udc56\u2208[1,\ud835\udc37] of size \ud835\udc37, we do not have access to \ud835\udd3c\ud835\udc43, but instead to the\nempirical expectation ^\ud835\udd3c\ud835\udc37over the empirical distribution ^\ud835\udc43\ud835\udc37. What happens when we are given \ud835\udc37\n<br><br>10This further emphasises the point of not only determining model size, but also training length before training begins.\n<br><br>24\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 25,
          "text": "datapoints that we can only see once, and when we constrain the size of the hypothesis space to be\n\ud835\udc41-dimensional ? We are making steps toward minimizing the empirical risk within a \ufb01nite-dimensional\nfunctional space H\ud835\udc41:\n<br><br>^\ud835\udc3f\ud835\udc37( \ud835\udc53) \u225c^\ud835\udd3c\ud835\udc37[log \ud835\udc53(\ud835\udc65)\ud835\udc66],\nsetting\n^\ud835\udc53\ud835\udc41,\ud835\udc37\u225cargmin\n\ud835\udc53\u2208H\ud835\udc41\n^\ud835\udc3f\ud835\udc37( \ud835\udc53).\n(8)\n<br><br>We are never able to obtain ^\ud835\udc53\ud835\udc41,\ud835\udc37as we typically perform a single epoch over the dataset of size \ud835\udc37.\nInstead, be obtain \u00af\ud835\udc53\ud835\udc41,\ud835\udc37, which is the result of applying a certain number of gradient steps based on\nthe \ud835\udc37datapoints\u2014the number of steps to perform depends on the gradient batch size, for which we\nuse well-tested heuristics.\n<br><br>Using the Bayes-classi\ufb01er \ud835\udc53\u2605, the expected-risk minimizer \ud835\udc53\ud835\udc41and the \u201csingle-epoch empirical-risk\nminimizer\u201d \u00af\ud835\udc53\ud835\udc41,\ud835\udc37, we can \ufb01nally decompose the loss \ud835\udc3f(\ud835\udc41, \ud835\udc37) into\n<br><br>\ud835\udc3f(\ud835\udc41, \ud835\udc37) \u225c\ud835\udc3f( \u00af\ud835\udc53\ud835\udc41,\ud835\udc37) = \ud835\udc3f( \ud835\udc53\u2605) + \u0000\n\ud835\udc3f( \ud835\udc53\ud835\udc41) \u2212\ud835\udc3f( \ud835\udc53\u2605)\u0001 + \u0000\n\ud835\udc3f( \u00af\ud835\udc53\ud835\udc41,\ud835\udc37) \u2212\ud835\udc3f( \ud835\udc53\ud835\udc41)\u0001\n.\n(9)\n<br><br>The loss comprises three terms: the Bayes risk, i.e. the minimal loss achievable for next-token\nprediction on the full distribution \ud835\udc43, a.k.a the \u201centropy of natural text.\u201d; a functional approximation\nterm that depends on the size of the hypothesis space; \ufb01nally, a stochastic approximation term that\ncaptures the suboptimality of minimizing ^\ud835\udc3f\ud835\udc37instead of \ud835\udc3f, and of making a single epoch on the provided\ndataset.\n<br><br>Expected forms of the loss terms.\nIn the decomposition (9), the second term depends entirely on\nthe number of parameters \ud835\udc41that de\ufb01nes the size of the functional approximation space. On the set\nof two-layer neural networks, it is expected to be proportional to\n1\n\ud835\udc411/2 (Siegel and Xu, 2020). Finally,\ngiven that it corresponds to early stopping in stochastic \ufb01rst order methods, the third term should\nscale as the convergence rate of these methods, which is lower-bounded by\n1\n\ud835\udc371/2 (Robbins and Monro,\n1951) (and may attain the bound). This convergence rate is expected to be dimension free (see e.g.\n<br><br>Bubeck, 2015, for a review) and depends only on the loss smoothness; hence we assume that the\nsecond term only depends on \ud835\udc37in (2). Empirically, we \ufb01nd after \ufb01tting (2) that\n<br><br>\ud835\udc3f(\ud835\udc41, \ud835\udc37) = \ud835\udc38+\n\ud835\udc34\n<br><br>\ud835\udc410.34 +\n\ud835\udc35\n<br><br>\ud835\udc370.28 ,\n(10)\n<br><br>with \ud835\udc38= 1.69, \ud835\udc34= 406.4, \ud835\udc35= 410.7. We note that the parameter/data coe\ufb03cients are both lower\nthan 1\n<br><br>2; this is expected for the data-e\ufb03ciency coe\ufb03cient (but far from the known lower-bound).\nFuture models and training approaches should endeavor to increase these coe\ufb03cients.\n<br><br>Fitting the decomposition to data.\nWe e\ufb00ectively minimize the following problem\n<br><br>min\n\ud835\udc4e,\ud835\udc4f,\ud835\udc52,\ud835\udefc,\ud835\udefd\n<br><br>\u2211\ufe01\n<br><br>Run \ud835\udc56\nHuber\ud835\udeff\n\u0010\nLSE\u0000\n\ud835\udc4e\u2212\ud835\udefclog \ud835\udc41\ud835\udc56, \ud835\udc4f\u2212\ud835\udefdlog \ud835\udc37\ud835\udc56, \ud835\udc52\u0001 \u2212log \ud835\udc3f\ud835\udc56\n\u0011\n,\n(11)\n<br><br>where \ud835\udc3f\ud835\udc46\ud835\udc38is the log-sum-exp operator. We then set \ud835\udc34, \ud835\udc35, \ud835\udc38= exp(\ud835\udc4e), exp(\ud835\udc4f), exp(\ud835\udc52).\n<br><br>We use the LBFGS algorithm to \ufb01nd local minima of the objective above, started on a grid\nof initialisation given by: \ud835\udefc\u2208{0., 0.5, . . . , 2.}, \ud835\udefd\u2208{0., 0.5, . . . , 2.}, \ud835\udc52\u2208{\u22121., \u2212.5, . . . , 1.}, \ud835\udc4e\u2208\n{0, 5, . . . , 25}, and \ud835\udc4f\u2208{0, 5, . . . , 25}. We \ufb01nd that the optimal initialisation is not on the boundary of\nour initialisation sweep.\n<br><br>We use \ud835\udeff= 10\u22123 for the Huber loss. We \ufb01nd that using larger values of \ud835\udeffpushes the model to\nover\ufb01t the small compute regime and poorly predict held-out data from larger runs. We \ufb01nd that\nusing a \ud835\udeffsmaller than 10\u22123 does not impact the resulting predictions.\n<br><br>25\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 26,
          "text": "D.3. Predicted compute optimal frontier for all three methods\n<br><br>For Approaches 2 and 3, we show the estimated model size and number of training tokens for a\nvariety of compute budgets in Table A3. We plot the predicted number of tokens and parameters for a\nvariety of FLOP budgets for the three methods in Figure A3.\n<br><br>Approach 2\nApproach 3\n<br><br>Parameters\nFLOPs\nTokens\nFLOPs\nTokens\n<br><br>400 Million\n1.84e+19\n7.7 Billion\n2.21e+19\n9.2 Billion\n1 Billion\n1.20e+20\n20.0 Billion\n1.62e+20\n27.1 Billion\n10 Billion\n1.32e+22\n219.5 Billion\n2.46e+22\n410.1 Billion\n67 Billion\n6.88e+23\n1.7 Trillion\n1.71e+24\n4.1 Trillion\n175 Billion\n4.54e+24\n4.3 Trillion\n1.26e+24\n12.0 Trillion\n280 Billion\n1.18e+25\n7.1 Trillion\n3.52e+25\n20.1 Trillion\n520 Billion\n4.19e+25\n13.4 Trillion\n1.36e+26\n43.5 Trillion\n1 Trillion\n1.59e+26\n26.5 Trillion\n5.65e+26\n94.1 Trillion\n10 Trillion\n1.75e+28\n292.0 Trillion\n8.55e+28\n1425.5 Trillion\n<br><br>Table A3 | Estimated optimal training FLOPs and training tokens for various model sizes. Analo-\ngous to Table 3, we show the model size/token count projections from Approaches 2 and 3 for various\ncompute budgets.\n<br><br>.\n<br><br>1010\n1011\n1012\n1013\nTokens\n<br><br>108\n<br><br>109\n<br><br>1010\n<br><br>1011\n<br><br>1012\n<br><br>Parameters\n<br><br>1e+18\n<br><br>1e+19\n<br><br>1e+20\n<br><br>1e+21\n<br><br>1e+22\n<br><br>1e+23\n<br><br>1e+24\n<br><br>1e+25\n<br><br>1e+26\nApproach 1\nApproach 2\nApproach 3\nChinchilla\nGopher\nGPT-3\nMegatron-Turing NLG\n<br><br>Figure A3 | Optimal number of tokens and parameters for a training FLOP budget. For a \ufb01xed\nFLOP budget, we show the optimal number of tokens and parameters as predicted by Approaches 1,\n2, and 3. For an alternate representation, see Figure 1.\n<br><br>D.4. Small-scale comparison to Kaplan et al. (2020)\n<br><br>For 1021 FLOPs, we perform a head-to-head comparison of a model predicted by Approach 1 and\nthat predicted by Kaplan et al. (2020). For both models, we use a batch size of 0.5M tokens and a\n<br><br>26\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 27,
          "text": "maximum learning rate of 1.5 \u00d7 10\u22124 that decays by 10\u00d7. From Kaplan et al. (2020), we \ufb01nd that\nthe optimal model size should be 4.68 billion parameters. From our approach 1, we estimate a 2.86\nbillion parameter model should be optimal. We train a 4.74 billion parameter and a 2.80 billion\nparameter transformer to test this hypothesis, using the same depth-to-width ratio to avoid as many\nconfounding factors as possible. We \ufb01nd that our predicted model outperforms the model predicted\nby Kaplan et al. (2020) as shown in Figure A4.\n<br><br>0\n1\n2\nSequences\n1e7\n<br><br>2.2\n<br><br>2.3\n<br><br>2.4\n<br><br>2.5\n<br><br>2.6\n<br><br>2.7\n<br><br>2.8\n<br><br>Training Loss\n<br><br>0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nFLOPs \u00d71021\n<br><br>2.2\n<br><br>2.3\n<br><br>2.4\n<br><br>2.5\n<br><br>2.6\n<br><br>2.7\n<br><br>2.8\n<br><br>Training Loss\n<br><br>Kaplan et al (2020)\nApproach 1\n<br><br>Figure A4 | Comparison to Kaplan et al. (2020) at 1021 FLOPs. We train 2.80 and 4.74 billion\nparameter transformers predicted as optimal for 1021 FLOPs by Approach 1 and by Kaplan et al.\n(2020). We \ufb01nd that our prediction results in a more performant model at the end of training.\n<br><br>E. Curvature of the FLOP-loss frontier\n<br><br>We observe that as models increase there is a curvature in the FLOP-minimal loss frontier. This means\nthat projections from very small models lead to di\ufb00erent predictions than those from larger models.\nIn Figure A5 we show linear \ufb01ts using the \ufb01rst, middle, and \ufb01nal third of frontier-points. In this work,\nwe do not take this in to account and we leave this as interesting future work as it suggests that even\nsmaller models may be optimal for large FLOP budgets.\n<br><br>F. FLOPs computation\n<br><br>We include all training FLOPs, including those contributed to by the embedding matrices, in our\nanalysis. Note that we also count embeddings matrices in the total parameter count. For large models\nthe FLOP and parameter contribution of embedding matrices is small. We use a factor of 2 to describe\nthe multiply accumulate cost. For the forward pass, we consider contributions from:\n<br><br>\u2022 Embeddings\n<br><br>\u2013 2 \u00d7 seq_len \u00d7 vocab_size \u00d7 d_model\n<br><br>\u2022 Attention (Single Layer)\n<br><br>\u2013 Key, query and value projections: 2 \u00d7 3 \u00d7 seq_len \u00d7 d_model \u00d7 (key_size \u00d7 num_heads)\n<br><br>27\n<br><br>"
        },
        {
          "figures": [
            {
              "ref": null,
              "url": "/static/uploads/26872a71-67ae-4557-8d54-9a9174de3653/figures/07c6a2d5-ee16-49cc-bcca-eb8e937c3e05.png"
            }
          ],
          "page_number": 28,
          "text": "1017\n1018\n1019\n1020\n1021\n1022\n<br><br>FLOPS\n<br><br>2.0\n<br><br>2.5\n<br><br>3.0\n<br><br>3.5\n<br><br>4.0\n<br><br>4.5\n<br><br>5.0\n<br><br>5.5\n<br><br>6.0\n<br><br>Training loss\n<br><br>75\n<br><br>250\n<br><br>500\n<br><br>1000\n<br><br>2500\n<br><br>5000\n<br><br>10000\n<br><br>Million Parameters\n<br><br>Figure A5 | Training curve envelopes. We \ufb01t to the \ufb01rst third (orange), the middle third (green),\nand the last third (blue) of all points along the loss frontier. We plot only a subset of the points.\n<br><br>\u2013 Key @ Query logits: 2 \u00d7 seq_len \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads)\n\u2013 Softmax: 3 \u00d7 num_heads \u00d7 seq_len \u00d7 seq_len\n\u2013 Softmax @ query reductions: 2 \u00d7 seq_len \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads)\n\u2013 Final Linear: 2 \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads) \u00d7 d_model\n<br><br>\u2022 Dense Block (Single Layer)\n<br><br>\u2013 2 \u00d7 seq_len \u00d7 (d_model \u00d7 \ufb00w_size + d_model \u00d7 \ufb00w_size)\n<br><br>\u2022 Final Logits\n<br><br>\u2013 2 \u00d7 seq_len \u00d7 d_model \u00d7 vocab_size\n<br><br>\u2022 Total forward pass FLOPs: embeddings+num_layers\u00d7(total_attention+dense_block) + logits\n<br><br>As in Kaplan et al. (2020) we assume that the backward pass has twice the FLOPs of the forward pass.\nWe show a comparison between our calculation and that using the common approximation \ud835\udc36= 6\ud835\udc37\ud835\udc41\n(Kaplan et al., 2020) where \ud835\udc36is FLOPs, \ud835\udc37is the number of training tokens, and \ud835\udc41is the number of\nparameters in Table A4. We \ufb01nd the di\ufb00erences in FLOP calculation to be very small and they do not\nimpact our analysis. Compared to the results presented in Rae et al. (2021), we use a slightly more\n<br><br>Parameters\nnum_layers\nd_model\n\ufb00w_size\nnum_heads\nk/q size\nFLOP Ratio (Ours/6\ud835\udc41\ud835\udc37)\n<br><br>73M\n10\n640\n2560\n10\n64\n1.03\n305M\n20\n1024\n4096\n16\n64\n1.10\n552M\n24\n1280\n5120\n10\n128\n1.08\n1.1B\n26\n1792\n7168\n14\n128\n1.04\n1.6B\n28\n2048\n8192\n16\n128\n1.03\n6.8B\n40\n3584\n14336\n28\n128\n0.99\n<br><br>Table A4 | FLOP comparison. For a variety of di\ufb00erent model sizes, we show the ratio of the FLOPs\nthat we compute per sequence to that using the 6\ud835\udc41\ud835\udc37approximation.\n<br><br>accurate calculation giving a slightly di\ufb00erent value (6.3 \u00d7 1023 compared to 5.76 \u00d7 1023).\n<br><br>28\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 29,
          "text": "G. Other di\ufb00erences between Chinchilla and Gopher\n<br><br>Beyond di\ufb00erences in model size and number of training tokens, there are some additional minor\ndi\ufb00erences between Chinchilla and Gopher. Speci\ufb01cally, Gopher was trained with Adam (Kingma and\nBa, 2014) whereas Chinchilla was trained with AdamW (Loshchilov and Hutter, 2019). Furthermore,\nas discussed in Lessons Learned in Rae et al. (2021), Chinchilla stored a higher-precision copy of the\nweights in the sharded optimiser state.\n<br><br>We show comparisons of models trained with Adam and AdamW in Figure A6 and Figure A7.\nWe \ufb01nd that, independent of the learning rate schedule, AdamW trained models outperform models\ntrained with Adam. In Figure A6 we show a comparison of an 680 million parameter model trained\n<br><br>0\n5\n10\n15\n20\n25\n30\nMillion Sequences\n<br><br>2.45\n<br><br>2.50\n<br><br>2.55\n<br><br>2.60\n<br><br>2.65\n<br><br>2.70\n<br><br>Training Loss\n<br><br>0\n5\n10\n15\n20\n25\n30\nMillion Sequences\n<br><br>17\n<br><br>18\n<br><br>19\n<br><br>20\n<br><br>21\n<br><br>22\n<br><br>23\n<br><br>24\n<br><br>25\n<br><br>26\n<br><br>Wikitext103 Perplexity\n<br><br>0\n5\n10\n15\n20\n25\n30\nMillion Sequences\n<br><br>2.60\n<br><br>2.65\n<br><br>2.70\n<br><br>2.75\n<br><br>2.80\n<br><br>2.85\n<br><br>2.90\n<br><br>2.95\n<br><br>3.00\n<br><br>C4 Loss\n<br><br>Training Setup\nAdam w/ High Precision\nAdamW w/ High Precision\nAdam No High Precision\nAdamW No High Precision\n<br><br>Figure A6 | Comparison of other di\ufb00erences. Using an 680 million parameter model, we show a\ncomparison between the setup used to train Gopher and Chinchilla\u2014 the change in optimiser and\nusing a higher precision copy of the weights in the optimiser state. The setup used for Chinchilla\n(orange) clearly outperforms the setup used to train Gopher (green).\n<br><br>0\n25\n50\n75\n100\n125\n150\nMillion Sequences\n<br><br>2.3\n<br><br>2.4\n<br><br>2.5\n<br><br>2.6\n<br><br>2.7\n<br><br>2.8\n<br><br>C4 Loss\n<br><br>0\n25\n50\n75\n100\n125\n150\nMillion Sequences\n<br><br>10.0\n<br><br>12.5\n<br><br>15.0\n<br><br>17.5\n<br><br>20.0\n<br><br>22.5\n<br><br>25.0\n<br><br>27.5\n<br><br>30.0\n<br><br>Wikitext103 Perplexity\n<br><br>0\n25\n50\n75\n100\n125\n150\nMillion Sequences\n<br><br>0.0\n<br><br>0.1\n<br><br>0.2\n<br><br>0.3\n<br><br>0.4\n<br><br>0.5\n<br><br>0.6\n<br><br>LAMBADA Accuracy\n<br><br>417M, Adam\n417M, AdamW\n1.4B, Adam\n1.4B, AdamW\n<br><br>Figure A7 | Adam vs AdamW. For a 417M (blue) and 1.4B model (green), we \ufb01nd that training with\nAdamW improves performance over training with Adam.\n<br><br>with and without the higher precision copy of the weights and with Adam/AdamW for comparison.\n<br><br>H. Results\n<br><br>H.1. The Pile\n<br><br>In Table A5 we show the bits-per-byte (bpb) on The Pile (Gao et al., 2020) of Chinchilla, Gopher,\nand Jurassic-1. Chinchilla outperforms Gopher on all subsets. Jurassic-1 outperforms Chinchilla on 2\nsubsets\u2014 dm_mathematics and ubuntu_irc.\n<br><br>29\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 30,
          "text": "Subset\nChinchilla (70B)\nGopher (280B)\nJurassic-1 (170B)\n<br><br>pile_cc\n0.667\n0.691\n0.669\npubmed_abstracts\n0.559\n0.578\n0.587\nstackexchange\n0.614\n0.641\n0.655\ngithub\n0.337\n0.377\n0.358\nopenwebtext2\n0.647\n0.677\n-\narxiv\n0.627\n0.662\n0.680\nuspto_backgrounds\n0.526\n0.546\n0.537\nfreelaw\n0.476\n0.513\n0.514\npubmed_central\n0.504\n0.525\n0.579\ndm_mathematics\n1.111\n1.142\n1.037\nhackernews\n0.859\n0.890\n0.869\nnih_exporter\n0.572\n0.590\n0.590\nopensubtitles\n0.871\n0.900\n0.879\neuroparl\n0.833\n0.938\n-\nbooks3\n0.675\n0.712\n0.835\nphilpapers\n0.656\n0.695\n0.742\ngutenberg_pg_19\n0.548\n0.656\n0.890\nbookcorpus2\n0.714\n0.741\n-\nubuntu_irc\n1.026\n1.090\n0.857\n<br><br>Table A5 | Bits-per-Byte on The Pile. We show the bpb on The Pile for Chinchilla compared to Gopher\nand Jurassic-1.\n<br><br>H.2. MMLU\n<br><br>In Table A6 we show the performance of Chinchilla and Gopher on each subset of MMLU.\n<br><br>H.3. Winogender Setup\n<br><br>We follow the same setup as in Rae et al. (2021). To test coreference resolution in Chinchilla, we\ninput a sentence which includes a pronoun reference (e.g., \u201cThe librarian helped the child pick out a\nbook because {pronoun} liked to encourage reading.\u201d), then measure the probability of the model\ncompleting the sentence \u201c\u2018{Pronoun}\u2019 refers to the\u201d with di\ufb00erent sentence roles (\u201clibrarian\u201d and\n\u201cchild\u201d in this example). Each example is annotated with the correct pronoun resolution (the pronoun\ncorresponds to the librarian in this example). Each sentence is tested with a female, male, and\ngender-neutral pronoun. An unbiased model would correctly predict which word the pronoun refers\nto regardless of pronoun gender.\n<br><br>H.4. BIG-bench\n<br><br>In Table A7 we show Chinchilla and Gopher performance on each subset of BIG-bench that we consider.\n<br><br>I. Model Card\n<br><br>We present the Chinchilla model card in Table A8, following the framework presented by Mitchell\net al. (2019).\n<br><br>30\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 31,
          "text": "Task\nChinchilla\nGopher\nTask\nChinchilla\nGopher\n<br><br>abstract_algebra\n31.0\n25.0\nanatomy\n70.4\n56.3\nastronomy\n73.0\n65.8\nbusiness_ethics\n72.0\n70.0\nclinical_knowledge\n75.1\n67.2\ncollege_biology\n79.9\n70.8\ncollege_chemistry\n51.0\n45.0\ncollege_computer_science\n51.0\n49.0\ncollege_mathematics\n32.0\n37.0\ncollege_medicine\n66.5\n60.1\ncollege_physics\n46.1\n34.3\ncomputer_security\n76.0\n65.0\nconceptual_physics\n67.2\n49.4\neconometrics\n38.6\n43.0\nelectrical_engineering\n62.1\n60.0\nelementary_mathematics\n41.5\n33.6\nformal_logic\n33.3\n35.7\nglobal_facts\n39.0\n38.0\nhigh_school_biology\n80.3\n71.3\nhigh_school_chemistry\n58.1\n47.8\nhigh_school_computer_science\n58.0\n54.0\nhigh_school_european_history\n78.8\n72.1\nhigh_school_geography\n86.4\n76.8\nhigh_school_gov_and_politics\n91.2\n83.9\nhigh_school_macroeconomics\n70.5\n65.1\nhigh_school_mathematics\n31.9\n23.7\nhigh_school_microeconomics\n77.7\n66.4\nhigh_school_physics\n36.4\n33.8\nhigh_school_psychology\n86.6\n81.8\nhigh_school_statistics\n58.8\n50.0\nhigh_school_us_history\n83.3\n78.9\nhigh_school_world_history\n85.2\n75.1\nhuman_aging\n77.6\n66.4\nhuman_sexuality\n86.3\n67.2\ninternational_law\n90.9\n77.7\njurisprudence\n79.6\n71.3\nlogical_fallacies\n80.4\n72.4\nmachine_learning\n41.1\n41.1\nmanagement\n82.5\n77.7\nmarketing\n89.7\n83.3\nmedical_genetics\n69.0\n69.0\nmiscellaneous\n84.5\n75.7\nmoral_disputes\n77.5\n66.8\nmoral_scenarios\n36.5\n40.2\nnutrition\n77.1\n69.9\nphilosophy\n79.4\n68.8\nprehistory\n81.2\n67.6\nprofessional_accounting\n52.1\n44.3\nprofessional_law\n56.5\n44.5\nprofessional_medicine\n75.4\n64.0\nprofessional_psychology\n75.7\n68.1\npublic_relations\n73.6\n71.8\nsecurity_studies\n75.9\n64.9\nsociology\n91.0\n84.1\nus_foreign_policy\n92.0\n81.0\nvirology\n53.6\n47.0\nworld_religions\n87.7\n84.2\n<br><br>Table A6 | Chinchilla MMLU results. For each subset of MMLU (Hendrycks et al., 2020), we show\nChinchilla\u2019s accuracy compared to Gopher.\n<br><br>Model Details\n<br><br>Organization Developing the Model\nDeepMind\n<br><br>Model Date\nMarch 2022\n<br><br>Model Type\nAutoregressive Transformer Language Model (Section 4.1 for\ndetails)\n<br><br>Feedback on the Model\n{jordanhoffmann, sborgeaud,\namensch,sifre}@deepmind.com\n<br><br>Intended Uses\n<br><br>Primary Intended Uses\nThe primary use is research on language models, including:\nresearch on the scaling behaviour of language models along\nwith those listed in Rae et al. (2021).\n<br><br>31\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 32,
          "text": "Primary Intended Users\nDeepMind researchers. We will not make this model available\npublicly.\n<br><br>Out-of-Scope Uses\nUses of the language model for language generation in harm-\nful or deceitful settings. More generally, the model should not\nbe used for downstream applications without further safety\nand fairness mitigations.\n<br><br>Factors\n<br><br>Card Prompts \u2013 Relevant Factor\nRelevant factors include which language is used. Our model is\ntrained on English data. Furthermore, in the analysis of mod-\nels trained on the same corpus in Rae et al. (2021), we found\nit has unequal performance when modelling some dialects\n(e.g., African American English). Our model is designed for\nresearch. The model should not be used for downstream ap-\nplications without further analysis on factors in the proposed\ndownstream application.\n<br><br>Card Prompts \u2013 Evaluation Factors\nSee the results in Rae et al. (2021) which analyzes models\ntrained on the same text corpus.\n<br><br>Metrics\n<br><br>Model Performance Measures\n<br><br>\u2022 Perplexity and bits per byte on language modelling\ndatasets\n\u2022 Accuracy on completion tasks, reading comprehension,\nMMLU, BIG-bench and fact checking.\n\u2022 Exact match accuracy for question answering.\n\u2022 Generation toxicity from Real Toxicity Prompts (RTP)\nalongside toxicity classi\ufb01cation accuracy.\n\u2022 Gender and occupation bias. Test include comparing\nthe probability of generating di\ufb00erent gender terms\nand the Winogender coreference resolution task.\n<br><br>We principally focus on Chinchilla\u2019s performance compared\nto Gopher on text likelihood prediction.\n<br><br>Decision thresholds\nN/A\n<br><br>Approaches to Uncertainty and Vari-\nability\n<br><br>Due to the costs of training large language models, we did\nnot train Chinchilla multiple times. However, the breadth\nof our evaluation on a range of di\ufb00erent task types gives a\nreasonable estimate of the overall performance of the model.\nFurthermore, the existence of another large model trained\non the same dataset (Gopher) provides a clear point of com-\nparison.\n<br><br>Evaluation Data\n<br><br>32\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 33,
          "text": "Datasets\n<br><br>\u2022 Language modelling on LAMBADA, Wikitext103 (Mer-\nity et al., 2017), C4 (Ra\ufb00el et al., 2020a), PG-19 (Rae\net al., 2020) and the Pile (Gao et al., 2020).\n\u2022 Language understanding,\nreal world knowledge,\nmathematical and logical reasoning on the Massive\nMultitask Language Understanding (MMLU) bench-\nmark (Hendrycks et al., 2020) and on the \u201cBeyond the\nImitation Game Benchmark\u201d (BIG-bench) (BIG-bench\ncollaboration, 2021).\n\u2022 Question answering (closed book) on Natural Ques-\ntions (Kwiatkowski et al., 2019) and TriviaQA (Joshi\net al., 2017).\n\u2022 Reading comprehension on RACE (Lai et al., 2017)\n\u2022 Common sense understanding on HellaSwag (Zellers\net al., 2019),\nPIQA (Bisk et al., 2020),\nWino-\ngrande (Sakaguchi et al., 2020), SIQA (Sap et al., 2019),\nBoolQ (Clark et al., 2019), and TruthfulQA (Lin et al.,\n2021).\n<br><br>Motivation\nWe chose evaluations from Rae et al. (2021) to allow us to\nmost directly compare to Gopher.\n<br><br>Preprocessing\nInput text is tokenized using a SentencePiece tokenizer with\na vocabulary of size 32,000. Unlike the tokenizer used for\nGopher, the tokenizer used for Chinchilla does not perform\nNFKC normalization.\n<br><br>Training Data\n<br><br>The same dataset is used as in Rae et al. (2021). Di\ufb00erences in sampling are shown in Table A1.\n<br><br>Quantitative Analyses\n<br><br>Unitary Results\nSection 4.2 gives a detailed description of our analysis. Main\ntake-aways include:\n<br><br>\u2022 Our model is capable of outputting toxic language as\nmeasured by the PerspectiveAPI. This is particularly\ntrue when the model is prompted with toxic prompts.\n\u2022 Gender: Our model emulates stereotypes found in our\ndataset, with occupations such as \u201cdietician\u201d and \u201cre-\nceptionist\u201d being more associated with women and \u201ccar-\npenter\u201d and \u201csheri\ufb00\u201d being more associated with men.\n\u2022 Race/religion/country sentiment:\nPrompting our\nmodel to discuss some groups leads to sentences with\nlower or higher sentiment, likely re\ufb02ecting text in our\ndataset.\n<br><br>33\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 34,
          "text": "Intersectional Results\nWe did not investigate intersectional biases.\n<br><br>Ethical Considerations\n<br><br>Data\nThe data is the same as described in Rae et al. (2021).\n<br><br>Human Life\nThe model is not intended to inform decisions about matters\ncentral to human life or \ufb02ourishing.\n<br><br>Mitigations\nWe considered \ufb01ltering the dataset to remove toxic content\nbut decided against it due to the observation that this can\nintroduce new biases as studied by Welbl et al. (2021). More\nwork is needed on mitigation approaches to toxic content and\nother types of risks associated with language models, such\nas those discussed in Weidinger et al. (2021).\n<br><br>Risks and Harms\nThe data is collected from the internet, and thus undoubtedly\nthere is toxic/biased content in our training dataset. Fur-\nthermore, it is likely that personal information is also in the\ndataset that has been used to train our models. We defer to\nthe more detailed discussion in Weidinger et al. (2021).\n<br><br>Use Cases\nEspecially fraught use cases include the generation of fac-\ntually incorrect information with the intent of distributing\nit or using the model to generate racist, sexist or otherwise\ntoxic text with harmful intent. Many more use cases that\ncould cause harm exist. Such applications to malicious use\nare discussed in detail in Weidinger et al. (2021).\n<br><br>Table A8 | Chinchilla model card. We follow the framework presented in Mitchell et al. (2019).\n<br><br>J. List of trained models\n<br><br>In Table A9 we list the model size and con\ufb01guration of all models used in this study. Many models\nhave been trained multiple times, for a di\ufb00erent number of training steps.\n<br><br>34\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 35,
          "text": "Task\nChinchilla\nGopher\nTask\nChinchilla\nGopher\n<br><br>hyperbaton\n54.2\n51.7\nmovie_dialog_same_or_di\ufb00\n54.5\n50.7\ncausal_judgment\n57.4\n50.8\nwinowhy\n62.5\n56.7\nformal_fallacies_syllogisms_neg\n52.1\n50.7\nmovie_recommendation\n75.6\n50.5\ncrash_blossom\n47.6\n63.6\nmoral_permissibility\n57.3\n55.1\ndiscourse_marker_prediction\n13.1\n11.7\nstrategyqa\n68.3\n61.0\ngeneral_knowledge_json\n94.3\n93.9\nnonsense_words_grammar\n78.0\n61.4\nsports_understanding\n71.0\n54.9\nmetaphor_boolean\n93.1\n59.3\nimplicit_relations\n49.4\n36.4\nnavigate\n52.6\n51.1\npenguins_in_a_table\n48.7\n40.6\npresuppositions_as_nli\n49.9\n34.0\nintent_recognition\n92.8\n88.7\ntemporal_sequences\n32.0\n19.0\nreasoning_about_colored_objects\n59.7\n49.2\nquestion_selection\n52.6\n41.4\nlogic_grid_puzzle\n44.0\n35.1\nlogical_fallacy_detection\n72.1\n58.9\ntimedial\n68.8\n50.9\nphysical_intuition\n79.0\n59.7\nepistemic_reasoning\n60.6\n56.4\nphysics_mc\n65.5\n50.9\nruin_names\n47.1\n38.6\nidentify_odd_metaphor\n68.8\n38.6\nhindu_knowledge\n91.4\n80.0\nunderstanding_fables\n60.3\n39.6\nmisconceptions\n65.3\n61.7\nlogical_sequence\n64.1\n36.4\nimplicatures\n75.0\n62.0\nmathematical_induction\n47.3\n57.6\ndisambiguation_q\n54.7\n45.5\nfantasy_reasoning\n69.0\n64.1\nknown_unknowns\n65.2\n63.6\nSNARKS\n58.6\n48.3\ndark_humor_detection\n66.2\n83.1\ncrass_ai\n75.0\n56.8\nanalogical_similarity\n38.1\n17.2\nentailed_polarity\n94.0\n89.5\nsentence_ambiguity\n71.7\n69.1\nirony_identi\ufb01cation\n73.0\n69.7\nriddle_sense\n85.7\n68.2\nevaluating_info_essentiality\n17.6\n16.7\ndate_understanding\n52.3\n44.1\nphrase_relatedness\n94.0\n81.8\nanalytic_entailment\n67.1\n53.0\nnovel_concepts\n65.6\n59.1\nodd_one_out\n70.9\n32.5\nempirical_judgments\n67.7\n52.5\nlogical_args\n56.2\n59.1\n\ufb01gure_of_speech_detection\n63.3\n52.7\nalignment_questionnaire\n91.3\n79.2\nenglish_proverbs\n82.4\n57.6\nsimilarities_abstraction\n87.0\n81.8\nHuman_organs_senses_mcc\n85.7\n84.8\nanachronisms\n69.1\n56.4\ngre_reading_comprehension\n53.1\n27.3\n<br><br>Table A7 | Chinchilla BIG-bench results. For each subset of BIG-bench (BIG-bench collaboration,\n2021), we show Chinchilla and Gopher\u2019s accuracy.\n<br><br>35\n<br><br>"
        },
        {
          "figures": [],
          "page_number": 36,
          "text": "Parameters (million)\nd_model\n\ufb00w_size\nkv_size\nn_heads\nn_layers\n<br><br>44\n512\n2048\n64\n8\n8\n57\n576\n2304\n64\n9\n9\n74\n640\n2560\n64\n10\n10\n90\n640\n2560\n64\n10\n13\n106\n640\n2560\n64\n10\n16\n117\n768\n3072\n64\n12\n12\n140\n768\n3072\n64\n12\n15\n163\n768\n3072\n64\n12\n18\n175\n896\n3584\n64\n14\n14\n196\n896\n3584\n64\n14\n16\n217\n896\n3584\n64\n14\n18\n251\n1024\n4096\n64\n16\n16\n278\n1024\n4096\n64\n16\n18\n306\n1024\n4096\n64\n16\n20\n425\n1280\n5120\n128\n10\n18\n489\n1280\n5120\n128\n10\n21\n509\n1408\n5632\n128\n11\n18\n552\n1280\n5120\n128\n10\n24\n587\n1408\n5632\n128\n11\n21\n632\n1536\n6144\n128\n12\n19\n664\n1408\n5632\n128\n11\n24\n724\n1536\n6144\n128\n12\n22\n816\n1536\n6144\n128\n12\n25\n893\n1792\n7168\n128\n14\n20\n1,018\n1792\n7168\n128\n14\n23\n1,143\n1792\n7168\n128\n14\n26\n1,266\n2048\n8192\n128\n16\n22\n1,424\n2176\n8704\n128\n17\n22\n1,429\n2048\n8192\n128\n16\n25\n1,593\n2048\n8192\n128\n16\n28\n1,609\n2176\n8704\n128\n17\n25\n1,731\n2304\n9216\n128\n18\n24\n1,794\n2176\n8704\n128\n17\n28\n2,007\n2304\n9216\n128\n18\n28\n2,283\n2304\n9216\n128\n18\n32\n2,298\n2560\n10240\n128\n20\n26\n2,639\n2560\n10240\n128\n20\n30\n2,980\n2560\n10240\n128\n20\n34\n3,530\n2688\n10752\n128\n22\n36\n3,802\n2816\n11264\n128\n22\n36\n4,084\n2944\n11776\n128\n22\n36\n4,516\n3072\n12288\n128\n24\n36\n6,796\n3584\n14336\n128\n28\n40\n9,293\n4096\n16384\n128\n32\n42\n11,452\n4352\n17408\n128\n32\n47\n12,295\n4608\n18432\n128\n36\n44\n12,569\n4608\n18432\n128\n32\n47\n13,735\n4864\n19456\n128\n32\n47\n14,940\n4992\n19968\n128\n32\n49\n16,183\n5120\n20480\n128\n40\n47\n<br><br>Table A9 | All models. We list the hyperparameters and size of all models trained as part of this work.\nMany shown models have been trained with multiple learning rate schedules/number of training\ntokens.\n<br><br>36\n<br><br>"
        }
      ]
    },
    "annotations": []
  }
]